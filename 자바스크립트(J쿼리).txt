* 변수 종류

전역 변수 : 전역에서 사용하는 데이터를 담는 변수이며 어디서든 접근해서 사용 가능하다.

지역 변수 : 특정 영역에서만 사용할 수 있는 변수이다.
	  주로 함수 내부에 만들어지는 변수이다.

매개 변수(파라미터) : 함수 외부에서 함수 내부로 데이터를 전달하기 위한 용도로 사용하는 변수이다.

멤버 변수(프로퍼티) : 클래스 내부에 만들어지며 주로 객체에서 사용하는 정보를 담는 변수이다.

* 변수란
변수는 물건을 보관했다가 필요할 떄 다시 꺼내 사용하는 일종의 창고이다.

1 ). 변수는 데이터를 저장하는 장소

2 ). 변수는 데이터를 읽고 쓰고 할 수 있는 장소

* 변수 만들기

예) var 변수이름 = 값;

변수를 만드는 가장 일반적인 방법이다.
변수는 "=" 연산자를 기준으로 var에 의해서 "변수이름"으로 변수가 만들어지고 이후 우측에 있는 데이터가 변수에 저장(대입)된다.

* var의 정체

var는 변수 선언을 의미하는 키워드이다.

* ;(세미클론)의 의미

문장 맨 뒤에 붙이는 세미콜론은 문장의 끝을 의미한다.

*변수 여러 개 만들기

변수를 만드는 방법에는 총 두가지의 방법이 있다.

방법 1 : var를 이용해서 여러 줄로 변수 구분을 하는 경우

예)
var 변수이름1 = 데이터;
var 변수이름2 = 데이터;

방법 2 : 콤마(,)를 이용해서 변수 구분을 하는 경우

예)
var 변수이름1 = 데이터, 변수이름2 = 데이터;

가독적인 부분을 고려했을 때 첫번째 방법을 사용하는 것이 좋다.

* 변수 이름을 만들때 주의해야 할 점

변수 이름을 만들 때는 다섯가지 정도 조심해야 할게 있다.

1. 숫자로 시작하면 안된다.

var 1st = 10; //에러

2. 대소문자 구분 : name 과 Name은 완전히 다른 변수이다.

var name = "ddandongne";
var Name = "ddandongne";

3. 변수는 대문자가 아닌 소문자로 시작

var Name = "ddandongne";
대신
var name = "ddandongne";

자바스크립트에서 변수를 대소문자 구분 없이 만들 수 있따.
다만 일반적으로 자바스크립트에서는 변수를 소문자로 시작한다.
일종의 암묵적으로 만들어진 규칙이라 보면 된다.

4. 변하지 않는 환경 변수의 값을 담는 상수 변수는 모두 대문자로 만들어야 한다.

var DB_NAME = "webdongne";

var ADMIN_ID = "ddandongne";

DB이름이나 관리자 아이디처럼 한 번 저장한 후 변경하는 안되는 값이 있다.
이런 상수 값을 담는 변수는 다른 변수와 구분이 될 수 있게 변수 이름을 모두 대문자로 만든다.
JAVA와 같은 고급 언어는 이런 상수 값을 만들 수 있는 방법을 문법적으로 지원한다.
문법적으로 지원한다는 의미는 상수 변수가 한 번 만들어지면 수정할 수 없게 되며 만약 값을 변경하려 하면 언어 자체에서 에러를 발생시켜 버린다.
아쉽게도 자바스크립트는 변수를 대문자로 만든다고 해서 값을 못 바꾸거나 하진 않는다.
마음만 먹으면 다른 값으로 변경할 수 있다.
하지만 일종의 무언의 약속인 샘이다.

5. 여러 단어가 조합되는 경우 다음과 같이 낙타 표기법(camelcase)으로 작성해야 한다.

var userName = "ddandongne";

var selectMenuIndex = 1;

이 내용 역시 일종의 관행일 뿐이지 반드시 이렇게 해야하는 건 아니다.
변수 userName을 username으로 만들어도 되고 user_name이라고 만들어도 된다.

6. 자바스크립트에서 이미 정의된 예약어(키워드)를 사용하면 안된다.

예약어 목록

break, case, catch, continue, default, delete, do, else, finally, for, funtion, if, in, instanceof, new, return, swich, this, throw, try, typeof, var, void, while, with

var class = "test1"; // 에러

var for = "test2"; //에러

var if = "test3"; //에러

*변수에 저장할 수 있는 데이터 종류

1 ) 데이터 위치

일반적으로 변수(저장소)는 "="를 기준으로 좌측에 오고 데이터는 우측에 온다.

예)
var 변수이름 = 데이터 ;

2 ) 데이터 종류

변수에 저장할 수 있는 데이터 종류는 다음과 같이 총 8개 정도 된다.

1. 숫자

2. 논리

3. 문자

4. 함수

5. 클래스

6. 클래스 인스턴스

7. undefined

8. null

*숫자형

예)
var score = 100;

숫자형은 크게 정수형과 실수형으로 나눠 진다.
10진수와 실수형은 일반적으로 사용하는 숫자이며 16진수는 글자색이나 배경색을 나타낼 때 주로 사용한다.

정수형 10진수 : 일상 생활에서 사용하는 숫자이며 소수점이 없다.
예)
var age = 30;

정수형 16진수 : 0x로 시작하며 숫자 0~9와 문자 A~F를 사용해서 모든 숫자를 표현한다.
	        주로 색상 값을 나타낼 때 사용한다.
예)
var color = 0xF00; //빨간색
var color = "#f00";

실수형 : 소수점을 갖는 숫자

예)
var weight = 60.6; //몸무게

숫자형 변수는 실무에서 다음과 같이 사용한다.

1. 나이,몸무게와 같은 숫자 정보를 저장할 때 숫자형을 사용한다.

2. 슈팅게임에서 현재 기록중인 게임 점수를 저장할 때 숫자형 변수를 사용한다.

3. 슈팅게임에서 현재 남아있는 에너지를 저장할 때도 역시 숫자형 변수를 사용한다.

4. 홈페이지 메뉴에서 현재 선택된 메뉴 인덱스 값을 저장할 때도 숫자형을 사용한다.

* 문자형(String)

예)
var userName = "웹동네";

문자형 변수는 실무에서 다음과 같이 사용한다.

1. 홈페이지의 메뉴 항목과 같은 글자 정보를 저장할 때 문자형 변수를 사용한다.

2. 여러분의 홈페이지에 로그인 할때 사용하는 아이디와 패스워드도 문자형 변수에 담아 사용한다. 

3. 게시판의 게시물 제목, 날짜, 글쓴이 본문 등 모두 문자형 변수에 담아 사용한다.

4. 이름, 닉네임, 주소 정보를 담을 때도 문자형 변수를 사용한다.

*논리형(Boolean)

var login =true;

프로그래밍을 하다 보면 (true,1)이냐 거짓(false,0)이냐를 저장해야 하는 경우가 많다.
이런 데이터를 프로그래밍 동네에서는 논리형이라고 한다.
논리형에는 오직 참(true,1)과 거짓(false,0) 두 가지 값이 존재하며 다음과 같은 경우를 예로 들 수 있다.

true 의미 내용

맞음
1
같음
진실
로그인 했음

false 의미 내용

틀림
0
다름(같지 않음)
거짓
로그인 안 했음

논리형 변수는 실무에서 다음과 같이 사용한다.

1. 현재 로그인 상태 여부를 저장할 때 논리형 변수를 사용한다.

2. 체크박스 선택여부를 저장할 때 논리형 변수를 사용한다.

* undefined

변수에 undefined가 저장되어 있다면 이것은 일반적으로 변수를 만든 후 초기화하지 않은 상태를 의미하며 다음과 같은 경우에 해당한다.

예)
 var data1;
        document.write("data1 = "+data1);

결과)
data1 = undefined

변수를 선언한 후 아무런 값을 넣지 않은 경우 변수에는 undefined이라는 값이 기본적으로 저장된다.

예 2)

function myFunc(data1){
	document.write("data1 ="+data1);
}

myFunc("value");
myFunc();

결과)
data1 = value1
data1 = undefined

myFunc("value"); 의 경우 data1 = "value1"를 넣은 것과 일치한다.

myFunc();의 경우 data1 = undefined를 넣은 것과 일치 한다.

즉, 매개변수(인자)가 있는 함수를 인자 값 없이 호출하는 경우에도 해당 매개변수에 undefined가 저장된다.

존재하지 않는 객체의 프로퍼티에 접근하는 경우

function MyClass (){
	this.name="ddangongne";
}
var test1 = new MyClass();
alert("test1.name = " +test1.name);
alert("test1.userName = " +test1.userName);

실행결과

test1.name = ddangongne
test1.userName = undefined

여기에서 test1.name은 객체의 프로퍼티로서 일종의 변수라고 생각하면 된다.
test1.name 대신 this.userName과 같이 객체에 존재하지 않는 변수를 접근하는 경우에도 undefined이 출력된다.
결론을 미리 이야기하자면 변수에 다음처럼 undefined 값을 직접 넣는 일은 거의 없을 것이다.

var username = undefined;

즉 " 변수를 선언하고 값을 아무것도 넣지 않으면 undefined이 기본값으로 들어간다" 라고 정리하면 된다.

* null

null의 뜻은 아무것도 참조하고 있지 않다라는 의미가 담겨 있으며 주로 객체를 담을 변수를 초기화할 때 많이 사용한다.

null 값으로 데이터를 초기화하는 경우

//숫자 변수 초기화

var data1 = 0;

//문자 변수 초기화

var data2  = 0;

//논리형 변수 초기화

var data3 = false;

//객체 변수 초기화

var data4 = null;

설명

일반적으로 초기화와 동시에 변수를 만들게 되는데 이때 초깃값을 보면 앞으로 이 변수가 어떤 데이터형을 저장할 변수인지 알 수 있다.

예를 들어 data3 = false의 경우 초깃값이 false로 초기화된 걸로 보면 앞으로 이 변수에는 true 또는 false가 저장될 것을 알 수 있다.
뜬금없이 문자열이 들어 갈 수도 있겠지만 그럴 일은 거의 없을 것이다.

이처럼 초기값으로 null을 넣었다는 의미는 소스코드 어디에선가 이 변수에 클래스의 인스턴스를 대입할 거라는 것을 알 수 있다.

var data3 = null;

data3 = new MyClass();

이쯤에서 undefined와 null을 정리해보면 undefined는 변수의 기본 초깃값이며 null은 객체를 담을 변수를 초기화 할 때 사용하는 값이다.

실무에서는 undefined보다 null을 자주 사용할 것이다.

[ 변수에는 숫자, 문자만을 저장할 수 있다고 생각하지만 이뿐 아니라 함수, 클래스, 클래스의 인스턴스도 저장할 수 있다. ]

-----------------------------------------------------------------------------------------------------------------------------

*함수란?

함수는 특정 기능을 하는 구문(알고리즘, 로직)을 묶어 재사용하는 문법이다.

예)
function 함수이름(매개변수){ [매개변수가 들어갈 수도 있고 없을 수도 있다.]

	안에 들어갈 내용
}

호출시

함수이름( );

사용예)
function gugudan(dan){
            document.write(dan*1 + "<br>");
            document.write(dan*2 + "<br>");
            document.write(dan*3 + "<br>");
            document.write(dan*4 + "<br>");
            document.write(dan*5 + "<br>");
            document.write(dan*6 + "<br>");
            document.write(dan*7 + "<br>");
            document.write(dan*8 + "<br>");
            document.write(dan*9 + "<br>");
        }
        gugudan(2);

* 매개 변수

함수가 호출되어 실행도기 시작하면 함수 내부는 함수 외부에서 접근할 수 없게 된다.

이때 함수 외부에서 함수 내부로 값을 전달하는 방법이 딱 하나 있는데 바로 매개변수를 이용하는 것이다.
매개변수라는 이름에서 알 수 있듯이 일종의 외부 데이터를 함수 내부로 전달하는 매개체 역할을 하는 변수이다.

<script>

	함수 A(데이터);

	function 함수 A(매개변수){
		매개변수 1값은
		이곳에서 사용된다.
	}
</script>

함수를 호출하면 데이터가 매개변수로 넘어간다.
즉, 매개변수 = 데이터와 같게 된다.

*리턴값

리턴값은 매개변수와 반대의 개념이라 보면 된다.
매개변수는 함수 외부에서 함수 내부로 데이터를 전달하기 위해 사용하는 통로라면 리턴값은 함수 내부에서 함수 외부로 데이터를 보내기 위해 사용하는 통로이다.
이렇게 함수 내부에서 보내오는 리턴값을 받고 싶은 경우는 다음과 같이 하면 된다.

var  변수이름 = 함수이름([매개변수1값,...]);

예를 들어 다음과 같이 두 수의 합을 계산해 외부로 알려주는 sum()이라는 함수를 만들 때 리턴값을 유용하게 사용할 수 있다.
function sum(a,b){
	var result = a+b;

return result;
}
	↓
var data = sum(10,20)
	↓
var data = 30;
최종적으로 함수 호출 결과가 우측에 오는 것과 같게 된다.

*함수 종류

함수는 크게 자바스크립트 코어 함수와 사용자 정의 함수 두 가지 분류로 나눌 수 있다.

1. 자바스크립트 코어 함수(라이브러리)

자바스크립트에서는 가장 기본이 되는 기능을 미리 구현해 제공해준다.
배열을 만드는 기능이라든지 숫자를 문자로 바꿔주는 기능, 특정 시간마다 이미지가 변경되도록 만들 때 사용하는 타이머 함수 같은 기능을 하는 함수를 모아둔 것을 자바스크립트 코어 라이브러리 라고 한다.

앞에서 사용한 alert()과 document.write() 모두 자바스크립트 코어 라이브러리 기능이다.

2. 사용자 정의 함수

사용자 정의 함수는 말 그대로 사용자가 필요로 해서 만드는 함수이다.
앞에서 만든 gugudan()도 사용자 정의 함수에 해당된다.

*클래스란?

함수가 특정 기능을 하는 구문(알고리즘, 로직)을 묶을 때 사용하는 문법이라면, 클래스는 연관 있는 변수와 함수를 하나로 묶을 때 사용하는 문법이다.

함수 - 함수는 특정 기능을 하는 구문을 재사용하기 위해 사용하는 문법

클래스 - 클래스는 연관있는 변수와 함수를 그룹짓거나 재사용하기 위해 사용하는 문법이다.

클래스에는 함수가 포함되어 있다.


자바스크립트에서 클래스를 만드는 방법은 3가지 정도 제공한다.
일단  함수 방식을 이용해 클래스를 만드는법을 예로 들자면

예)
function Calculator(){
            this.add = function(a,b){
                alert("두 수의 합은 "+(a+b)+"이다.")
            }
            this.sub = function(a,b){
                alert("두 수의 차은 "+(a-b)+"이다.")
            }
            this.mul = function(a,b){
                alert("두 수의 곱은 "+(a*b)+"이다.")
            }
            this.div = function(a,b){
                alert("두 수의 나눈 값은 "+(a/b)+"이다.")
            }

            
}

함수를 사용하기 위해 함수 호출을 해줘야 하듯 클래스를 사용하려면 일반적으로 인스턴스라는 것을 생성해야 한다.
이때 new라는 키워드를 생성한다.

var tabMenu = new TabMenu();

인스턴스를 다른 말로 객체라고도 부른다.

*메서드와 프로퍼티

일반 변수, 함수를 클래스 내부에 들어 있는 변수, 함수와 구분하기 위해 클래스 내부에 있는 변수를 프로퍼티라고 하며 함수를 메서드라고 부른다.
용도가 다르긴 하지만 일단 이렇게 알고 있으면 될 것 같다.


ㅡ클래스ㅡㅡㅡㅡㅡ
ㅣ		ㅣ
ㅣvar 변수=값;	ㅣ 클래스 내부에 만드는 변수를 프로퍼티 또는 멤버 변수라고 부른다.
ㅣ		ㅣ
ㅣ		ㅣ
ㅣㅡㅡㅡㅡㅡㅡㅡㅡㅡ

ㅡ클래스ㅡㅡㅡㅡㅡ
ㅣ		ㅣ
ㅣfucntion 함수(){	ㅣ 함수 내부에 만드는 변수를 프로퍼티 또는 멤버 변수라고 부른다.
ㅣ	...	ㅣ
ㅣ}		ㅣ
ㅣㅡㅡㅡㅡㅡㅡㅡㅡㅡ

* 클래스 내부에 들어 있는 함수(메서드)를 호출하는 방법

함수와 마찬가지로 클래스 역시 클래스 외부에서 클래스 내부의 변수(프로퍼티)와 함수(메서드)를 마음 대로 접근할 수 없다.
이때 접근하는 방법이 딱 하나 있는데 바로 접근 연산자(.)를 활용하는 것이다.

정리하자면 접근 연산자(.)는 클래스 내부에 들어 있는 변수와 함수에 접근할 때 사용하는 연산자이다.
달리 표현하면 클래스 내부에 들어있는 변수와 함수에 접근하기 위해서는 반드시 접근 연산자를 사용해야 한다.

클래스 내부에 있는 함수를 호출할 때

먼저 인스턴스를 만들어 줘야 한다.

예)
var cal1 = new Calculator();

그다음

접근 연산자를 이용해 함수(메서드)호출을 한다.

예)
cal1.add(10,20);

정리하자면 인스턴스 생성 후 접근 연산자를 이용해 사용한다 라고 알고 있으면 된다.

추가+

1. document.write();

document는 객체이고 이 안에는 수많은 함수가 있으니, (.)이라는 접근연산자를 써서 객체 안에 write() 라는 함수를 호출했다고 볼 수 있다.

2. console.log();

이것또한 console이라는 객체의 기능 중 log()라는 함수를 사용한 것이다.

-----------------------------------------------------------------------------------------------------------

*형 변환

형변환이란?

프로그래밍을 하다 보면 종종 숫자를 문자로 변환한다거나 또는 문자를 숫자로 변환해야 하는 경우가 발생한다.
이런 작업을 우리는 형변환이라고 한다.

형변환을 사용하는 경우

예)
  var age = window.prompt("나이를 입력해 주세요", "");
        age= age + 30;
        document.write("결과값은 = " + age);

결과)
만약 10을 입력했다면 1030이 나왔을 것이다.
이 이유는 prompt에 입력된 값은 문자열인데 숫자형인 30과 합이 합쳐지기 보단 문자열+숫자형으로 인식하기 때문이다.

문자형인것을 숫자형으로 바꿔줄시

var age = window.prompt("나이를 입력해 주세요", "");
        age= parseInt(age) + 30;
        document.write("결과값은 = " + age);

parseInt(변경해줄 변수) 를 사용해서 형변환을 시켜준다.

결과)

40

*형변환 종류

1. 암시적 형변환

자바스크립트 엔진이 필요에 의해 암시적으로 형을 자동으로 변환시키는 것을 암시적 형변환이라고 한다.
암시적 형변환 / 자바스크립트 엔진 / 자동(암시적)

2. 명시적 형변환

개발자가 자바스크립트를 이용해서 직접 어떤 형으로 바꿀지 명시해주는 것을 명시적 형변환이라고 한다.
명시적 / 개발자 / 수동(명시적)

*암시적 형변환

암시적 형변환이란 앞서 알아본 것처럼 자바스크립트에 의해 자동으로 형변환이 일어나는 것을 말한다.

예)
var result = 1+"2";
document.write("result="+result);

결고)
12(문자열 1,2를 나타냄)

숫자 형 + 문자 형 = 문자형 / var a = 10+"10" // a는 문자 "1010"

불린 형 + 문자 형 = 문자형 / var a = true+"10" // a는 문자 "true10"

불린 형 + 숫자 형 = 숫자 형 / var a = true+10 // a는 숫자 11

*명시적 형변환

명시적 형변환은 암시적 형변환의 반대라고 생각하면 된다.
개발자가 직접 스크립트를 이용해서 어떤 형으로 바꿀지 명시해주는 것을 명시적 형변환이라고 한다.

1. 문자를 숫자로 형변환 하는 방법

정수 형 

1). parseInt() = 예) var value = "123.456";
		     parseInt(value); // 실행결과 123

2). Number() = 예) var value = "123";
		   Number(value); // 실행결과 123

실수 형

1).parseFloat() = 예) var value = "123.456";
		      parseFloat(value); // 실행결과 123.456

2).Number() = 예) var value = "123.456";
		  Number(value) // 실행결과 123.456


2. 숫자를 문자로 형변환 하는 방법

1).  일반 문자 형 / String / var value = 15;
			   String(value); // 실행결과 "15"

2). 16진수 문자 형 / Number.toString() / val value = 15;
					 value.toString(16) // 실행결과 : "f";

3). 실수 문자 형 / Number.toFixed() / val value = 123.456;
				      val.toFixed(2) // 실행결과 : "123.45"; // 반올림 발생

테스트)

var test1 = 15;를 문자로 변형시켜라

예)	String()을 사용한 경우
	var test1 = 15;

	var result = String(test1);
	document.write("result = " + result + 10);

결과 : 1510

다른 예)toString()을 사용한 경우

	var test1 = 15;

	var result = test1.toString();
        document.write("result = " + result + 10);

번외)

var test1 = 15;
var result = test1.toString(16);[16진수형 문자열로 변형]
document.write("result = " + result);

이 기능은 HTML 요소의 스타일 속성 중 글자색이나 배경색 등과 같은 색 속성을 변경할 때 주로 사용한다.


번외2). 1초마다 한 번씩 배경색을 랜덤하게 변경하기

 $(document).ready(function(){
            setInterval(function(){
                var color = Math.random()*0xffffff;     // 0~ffffff 사이의 랜덤 색 만들기 이때 결과는 10진수 실수
                color = parseInt(color);          // 실수를 정수로 형변환
                color = color.toString(16);    // 정수를 16진수 문자로 변경

                $("body").css("background-color", "#"+color);  // 문자로 된 색상으로 최종 배경색 변경
            },1000);
        })

Jquery를 사용하기 위해서는 
<script  src="http://code.jquery.com/jquery-latest.min.js"></script>
구문을 넣어서 제이쿼리 라이브러리를 불러와야 한다.

코드에 대해 간단히 설명하자면 자바스크립트에서 기본으로 제공하는 setInterval() 함수를 이용해 1초마다 한 번씩 배경색을 바꾸는 예제이다.


정리)

암시적 형변환 / 문자를 숫자로 형변환하는 방법x / var result = 숫자+""

명시적 형변환 / var result = parseInt("문자열숫자");		var result = 숫자.toString();
		var result = parseFloat("문자열 숫자");		var result = 숫자.toFixed();
		var result = Number("문자열 숫자")		var result = String(숫자);

------------------------------------------------------------------------------------------------------------

*jQuery

jQuery란?

서버에서 데이터를 가져와 화면에 뿌려주는 작업 등을 할 때 쉽고 빠르게 작업할 수 있게 도와주는 크로스 브라우징 라이브러리이다.

jQuery기능

[ DOM ] 
1. DOM 객체의 필수 프로퍼티와 메서드
2. 노드 추가, 삭제, 찾기, 이동시키기
3. 스타일 추가, 수정, 값 구하기
4. 속성 추가, 수정, 값 구하기
5. 이벤트 등록, 제거, 발생시키기
6. 위치, 크기와 관련된 프로퍼티와 메서드

[ Ajax ] 
jQuery에서는 더욱 쉽게 Ajax를 사용할 수 있다.

[ plugin ]
필요하다 싶은 기능들은 이미 플러그인으로 만들어져 있다.

[ 효과 ]
애니메이션 효과를 아주 쉽고 다양하게 줄 수 있다.

[ 크로스 브라우징 라이브러리란? ]

특정 기능을 다양한 웹 브라우저에서 동일한 방법으로 사용할 수 있는 라이브러리

다음 사용 예제를 보고 자바스크립트와 jQuery 버전 두가지로 나눠 볼 수 있다.

사용 예)
 <div>
        <p>이 문서는 jQuery를 사용하는 이유를 설명하기 위해 만든 예제 입니다. </p>
        <p> 질문 : 스크립트를 이용해 문서에서 #menu2의 li 태그 스타일 속성 중 글자색을 모두 빨간색으로 변경해주세요.</p>
    </div>
    <ul class="menu" id="menu1">
        <li>menu1-1</li>
        <li>menu1-2</li>
        <li>menu1-3</li>
        <li>menu1-4</li>
        <li>menu1-5</li>
        <li>menu1-6</li>
        <li>menu1-7</li>
    </ul>
    <ul class="menu" id="menu2">
        <li>menu2-1</li>
        <li>menu2-2</li>
        <li>menu2-3</li>
        <li>menu2-4</li>
        <li>menu2-5</li>
    </ul>

[자바스크립트]

	window.onload=function(){
            //먼저 #menu2를 찾는다.
            var menu2=document.getElementById("menu2");
            //#menu의 태그 중 li 태그를 찾는다.
            var liList = menu2.getElementsByTagName("li");

            //li태그에 하나씩 접근해 글자색을 변경한다.
            for(var i =0; i<liList.length; i++){
                var li = liList[i];
                li.style.color='#f00';

설명)
getElementById(),getElementsByTagName(), li.style.color 등의 기능은 모두 DOM(Document Object Model)이라는 곳에서 제공하는 기능이다.
DOM은 수많은 클래스로 이뤄져 있다.

getElementsByTagName() = 문서안에 태그 이름을 선택한다..

getElementById() = 문서 안에 아이디를 선택한다..

li.style.color li태그 안에 color 스타일을 적용할 때 사용한다.

[jQuery]

$(document).ready(function(){
            $("#menu2 li").css("color", "#f00");
        })

jquery에서는 특정 노드(태그)를 찾을 때 CSS선택자를 그대로 이용한다.
달리 말하면 jQuery는 CSS선택자만 알고 있어도 웬만한 것들은 어느 정도 처리할 수 있다는 의미와도 같다.


*jQuery사용법

먼저 jQuery를 사용하려면 jQuery 기능이 들어있는 라이브러리 파일을 연결해야 한다.
그리고 ready()라는 jQuery 기능을 이용해 초기 시작점을 정해야 한다.

예)

<script  src="http://code.jquery.com/jquery-latest.min.js"></script>①
<script>

	$(document).ready(function(){②
	//여기에 노드를 다루는 코드를 작성하면 된다.
	alert("환영합니다.");③
})
</script>

①여기서 맨 위에 <script  src="http://code.jquery.com/jquery-latest.min.js"></script>를 사용하여 라이브러리 파일을 연결시켜 주고

②jQuery에서 제공하는 ready() 메서드를 활용해 시작점을 만들어 준다.
좀더 풀어서 설명하면 ready() 메서드는 노드를 찾거나 스타일을 변경하는 등의 작업을 진행할 준비가 되면 매개변수 값으로 남긴 함수를 호출해 준다.

③jQuery를 사용할 준비가 됐는지 확인하기 위해 알림메시지를 띄워 준다.

*jQuery를 이용한 노드 찾기

jQuery에는 수많은 노드 찾기 기능을 제공한다.
이 중에서 가장 쉬우면서도 기초적인 노드 찾기 방법을 배워보자
jQuery를 활용해 노드를 찾는 가장 기본적인 방법은 다음과 같다.

var $ 변수이름 = $("CSS 선택자");

$()의 정체

$()를 jQuery라고 생각하는 초보자도 있는데 사실 $()는 그냥 함수 호출일 뿐이다.
함수 이름이 $인 함수 호출인 것이다.
$() 함수의 역할은 선택자에 해당하는 노드를 찾아주는 역할을 한다.

CSS 선택자
말 그대로 CSS선택자이다.
찾고 싶은 선택자를 만들어 $() 함수의 매개변수 값으로 넣어주면 된다.

var $ 변수이름

$() 함수에서 리턴해주는 값을 저장하기 위해 만든 변수이다.
변수이름  앞에 $를 붙여준 이유는 jQuery 기능이 들어있는 변수라는 것을 표현하기 위해서이다.

사용 예)

문서에서 div 태그의 글자색을 모두 빨간색으로 변경해 주세요.

$(document).ready(function(){
            var $divs = $("div");①
            $divs.css("color","#f00");②
        })

<div>
        jQuery를 이용한 노드 찾기
    </div>
    <p>
        $()를 jQuery라고 생각하는 초보자도 있는데 사실 $()는 그냥 함수 호출일 뿐입니다. 함수 이름이 $인 함
        수 호출인 것이죠. $() 함수의 역할은 선택자에 해당하는 노드를 찾아주는 역할을 합니다.
    </p>

    <div>
        $() 함수에서 리턴해주는 값을 저장하기 위해 만든 변수입니다. 변수이름 앞에 $를 붙여준 이유는jQuery
        기능이 들어있는 변수라는 것을 표현하기 위해서입니다. 그럼 이쯤에서 예제 하나를 만들어보죠.
    </div>

① : 쉽게 설명하면 $() 함수를 활용해 div 태그를 찾는 구문이다.
만약 문서에서 p 노드를 찾고 싶다면? div 선택자 대신 p선택자를 넣어주면 된다.
좀더 고급스럽게 해석하면, 먼저 $("div")라는 구문이 실행되면 $() 함수는 문서에서 div 태그를 찾은 후 div 태그를 쉽게 다룰 수 있게 jQuery에게 넘겨 jQuery 클래스 인스턴스를 만들어 리턴해 준다.
이 리턴값은 $divs라는 변수에 저장된다.

② : $divs.css()

자세히 살펴보면 앞서 배운 접근 연산자(.)가 사용된 것을 확인할 수 있다.
접근 연산자는 클래스 내부에 들어있는 기능을 접근할 때 사용하는 연산자라고 했다.
즉, $div에는 $() 함수 호출 후 리턴값으로 받은 jQuery 인스턴스가 들어있기 때문에 $divs.css()는 jQuery의 수많은 기능 중 css()라는 기능을 사용한다는 구문으로 해석할 수 있다.
이 구문이 실행되면 css() 함수(매서드)에 의해 글자색이 빨간색으로 변경된다.

정리하자면 앞으로 다음과 같은 구문을 만나게 되면 jQuery의 기능을 사용하는 구문이라고 해석하면 된다.

$변수이름.함수이름() <- jQuery 기능 사용 구문

*jQuery와 css와의 관계

오늘날 jQuery가 이와 같은 큰 인기를 누릴 수 있었던 가장 큰 요인 중 하나는 바로 CSS선택자를 활용해 노드를 찾을 수 있는 기능 때문이다.
CSs선택자 개념을 알고 있다면 jQuery를 이미 어느 정도 사용할 수 있다고 판단해도 될 것이다.

예)

$("div")
$(".select")
$("div > p")
$("div ul li.select)

*jQuery 핵심 기능

1. 이벤트 등록

$대상.on("이벤트 이름", 이벤트리스너);

또는

$대상.단축이벤트메서드(이벤트리스너);

jQuery에서 제공하는 on() 메서드와 단축 이벤트 이벤트 메서드를 이용하면 이벤트를 쉽게 등록할 수 있다.
이벤트 등록 이외에도 이벤트 등록 제거 기능도 있지만 일단 먼저 등록 방법만 알고 있으면 된다.

사용 예)

$(document).ready(function(){①
            $("#btn").on("click", function(){
                alert("환영합니다.");
            });
            //또는
            $("#btn").click(function(){②
                alert("환영합니다");
            });
        })

①은 일반 이벤트 등록 방법이다.

②는 단축 이벤트 등록 방법이다.

두 가지 방법중 단축 이벤트 메서드를 많이 사용하게 된다.
click() 메서드 이외에도 여러 가지 단축 이벤트 메서드가 있는데, 초보 단계에서는 주로 click() 메서드를 많이 사용할 것이다.

2.스타일 설정하기

[ 설정 내용이 하나인 경우 ]
$대상.css("스타일 이름", 값);

[설정 내용이 여러 개인 경우]
$대상.css({
	"스타일 이름":"값"[,
	"스타일 이름":"값",.... []안에 들어가는 부분은 생략하셔도 됩니다.
	]
});

예제 1)

확인 버튼(#btnCheck)을 클릭하면 패널(#panel)의 외각선(border)을 "4px solid #f00" 으로 변경하시오.

$(document).ready(function(){
            $("#btnCheck").on("click",function(){
                $("#panel").css("border","4px solid #f00");
            });

        })

<button id="btnCheck">확인</button>
    <div id="panel">
        초보자가 알아야 할 jQuery 핵심 기능: 스타일 설정하기

    </div>

설명)

css() 메서드의 첫 번째 매개변수 값에는 스타일 속성 이름을 넣어주고 두 번째 매개변수 값에는 스타일 설정값을 넣어서 호출해주면 된다.

예제 2)

$(document).ready(function(){
            $("#btnCheck").on("click",function(){
                $("#panel").css({
                    "fontSize":16,
                    "color":"#f00"
                });
            });

        })

설명)
여러 개의 스타일 속성을 동시에 설정해야 하는 경우에도 css() 메서드를 사용하면 된다.
이때 {}으로 묶어서 속성을 만들어 준다.

jQuery는 수많은 기능(함수)을 가진 하나의 클래스 덩어리이며 주로 $()라는 함수 호출을 시작으로 인스턴스가 만들어진다는 것이다.
이후 접근 연산자를 이용해 원하는 기능을 사용하게 된다.

----------------------------------------------------------------------------------------------------------------

*조건문

조건문이란?

조건문 역시 형변환(형이 변하는 것) 처럼 단어 속에 뜻이있다.
특정 조건에 맞는 경우에만 특정 구문을 실행하고자 할 때 사용하는 자바스크립트 제어문이다.

조건문 종류

조건문은 if문과 switch문 두가지가 있다.

*if문

if문은 앞에서 알아본 것처럼 특정 조건에 맞는 경우에만 특정 구문을 실행하고 싶을 때 사용하는 조건문 중 하나이다.

예문

if(조건){
	조건에 맞을 시 실행할 문장;
}
else{
	조건에 맞지 않을 경우 실행할 문장;
}

*if문 문법

1단 if문은
if(조건){
	조건이 참일 경우 실행할 구문;
}

2단 if문
if(조건){
	조건이 참일 경우 실행할 구문;
}
else{
	조건이 안맞을 경우 실행할 구문;
}

3단 if문

if(조건식1){
	//하나 또는 여러 개의 문장을 작성할 수 있다.
	조건식이 참일 경우 실행할 구문;
}
else if(조건식2){
	조건식2가 참일 경우 실행할 구문;
	}
else if(조건식3){
	조건식3이 참일 경우 실행할 구문;
	}
else {
	모든 조건에 맞이 않을 때 실행할 구문;


*논리 연산자

&&  / 10<a && 100>a
a가 10보다 크고 100보다 작은 경우 참이다, 즉 두가지 조건식이 모두 참일 경우에는 참이고 그 외에모두 거짓말이다.

|| / 10<a || 100>a
a가 10보다 크거나 또는 a가 100보다 작은 경우 참이다, 즉 두 조건식 중 하나만 참이여도 참이다.


* &&(AND)

해석은 '그리고' 라고 읽으며 두 조건이 모두 참인 경우에만 결과값이 참이 된다.
둘 중 하나라도 거짓이면 결과는 거짓이 된다.

* ||(OR)

해석은 '~이거나, 또는' 이라고 읽으며 두 조건 중 하나만 참이여도 모두 참이다

*조건부 연산자

조건부 연산자 역시 이 단순화를 위한 문법 중 하나이며 주로 2단계 if를 좀더 간결하게 표현하고자 할 때 사용한다.

2단계 if

if(조건식){
	실행구문1;
}else{
	실행구문2;
}

조건부 연산자

(조건식) ? 실행구문1 : 실행구문2;

사용법)

(조건식) ? 조건식이 참일 때 실행되는 구문 : 조건식이 거짓일 때 실행되는 구문;

1) 값 입력.
var value = prompt("수를 입력주세요","");

2) 문자를 숫자로 변환.
value = parseInt(value);

3) 비교
(value%2==0) ? alert("짝수입니다") : alert("홀수 입니다.");

-------------------------------------------------------------------------------------------------------------
* 조건문 switch

switch문이란?

if와 같은 조건문 중에 하나이지만switch는 주로 여러 개의 조건을 처리해야 하는 복잡한 다중 if~else 대신 사용한다.

사용 예)
switch(변수 또는 값){

	case 값1 :
		실행구문1;
		break;

	case 값2 :
		실행구문2;
		break;

	case 값3 :
		실행구문3;
		break;

	case 값4 :
		실행구문4;
		break;

	default :
		모든 조건이 일치하지 않을 때 실행되는 구문;

switch 역시 조건문 중에 하나이기 때문에 if를 이해하고 있다면 switch문을 아주 쉽게 이해할 수 있다.

1. 조건식

if에서는 조건식을 if(변수==값)를 사용해서 처리하는 반면 switch에서는 switch(변수) case 값을 사용한다.
switch의 변수 또는 식의 값이 case에 선언된 값과 같은 해당 실행 구문이 된다.

2. case~break;

if에서는 {}를 이용해 실행구문 영역을 지정하는 반면 switch는 case ~ break 문을 이용한다.
break문을 만나면 switch구문에서 벗어난다.

3. default

조건이 모두 일치하지 않은 경우 이 영역에 있는 구문이 실행된다.


* if와 switch의 차이점

1. if를 switch로 변경할 수 없는 경우

if 구문 중 조건식에 >, <, >=, <=, != 와 같은 빅 연산자를 사용한 경우는 switch로 변경할 수 없다.

예)

if를 사용한 경우				switch문으로는 변경할 수 없다.

if(변수> 값1){
	실행구문1;
}else if(변수 > 값2){
	실행구문2;
}else if(변수 > 값3){
	실행구문3;
}else if(변수 > 값4){
	실행구문4;
}

2. if를 switch로 변경할 수 있는 경우

if 구문 중 조건식이 특정 값과 일치하는 경우(==)만 switch로 변경할 수 있다.


if를 사용한 경우

if(변수==값1){
	실행구문1;
}else if(변수==값2){
	실행구문2;
}else if(변수==값3){
	실행구문3;
}else if(변수==값4){
	실행구문4;
}

switch문을 사용한 경우

switch(변수){
        case 1 :
            실행구문1;
            break;
        case 2 :
            실행구문2;
            break;
        case 3 :
            실행구문3;
            break;
        case 4 :
            실행구문4;
            break;
    }

예문 1)

랜덤 경품 추첨기

추첨 버튼을 클릭할 때마다 1에서 10까지의 숫자를 랜덤하게 뽑아(생성),다음 요구사항에 맞게 출력되게 만들어주세요.

[요구사항]

1. 3번이면 당첨! 냉장고
2. 5번이면 당첨! 세탁기
3. 8번이면 당첨! TV
4. 이외의 변호면 꽝

[ 기본 소스 ]

$(document).ready(function(){
	//버튼에 클릭 이벤트 리스너 등록
	$("#start").click(function(){
		//여기에 소스를 입력해 주세요.

	})
})

[ 힌트 ]
1에서 10사이의 랜덤 수를 생성하는 방법

parseInt(Math.random()*10)+1

[ 완성된 예문 ]

  $(document).ready(function(){
        //버튼에 클릭 이벤트 리스너 등록
        $("#start").click(function(){
            var lucky = parseInt(Math.random()*10)+1; ①

            switch(lucky){ ②
                case 3 :
                    alert("냉장고");
                    break;
                case 5 :
                    alert("당첨! 세탁기");
                    break;
                case 8 :
                    alert("당첨! TV");
                    break;
                default :
                    alert("꽝");
            }
        })
    })

① : Math.random()은 0에서 1사이의 랜덤 숫자를 발생하는 기능으로서 여기에 10을 곱하면 0에서 9 사이의 랜덤 숫자를 구할 수 있다.
대신 정수가 아닌 소수로 나오기 때문에 parseInt()를 이용해 정수로 형변환을 해준다.
그리고 이 값에 1을 더해 우리가 원하는 1~10까지의 랜덤 숫자를 만들어 낸다.

② : 앞에서 만는 랜덤 숫자를 switch문의 조건식에 넣어 정해진 번호에 맞게 경춤을 출력해 준다.


번외 편)

물고기 방향키로 움직이기

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>자바 테스트</title>
    <script  src="http://code.jquery.com/jquery-latest.min.js"></script>
    <style>
        #bg{
            width: 600px;
            height: 600px;;
            border: 1px solid black;
            position: relative;
        }
        #fish {
            position: absolute;
            left: 50px;
            top: 200px;
        }
    </style>
</head>
<body>
    <div id="bg">
        <img src="fish.png" id="fish">
    </div>
    <script>
             $(document).ready(function(){
                 //물고기 노드 구하기.
                 var $fish = $("#fish");
                 //위치 초기화, 시작위치는 50, 200
                 var x = 50;
                 var y = 200;
                 //키보드 다운 이벤트 리스너 등록
                 $(document).keydown(function(e){
                     console.log("입력한 키 코드 값 = " +e.keyCode);
                 
                    
                     switch(e.keyCode){
                         case 37 : //왼쪽 방향키
                             x-=50;
                             break;
                        case 39 : //오른쪽 방향키
                            x+=50;
                            break;
                        case 38 : //위쪽 방향키
                            y-=50;
                            break;
                        case 40 : //아래쪽 방향키
                            y+=50;
                            break;
                     }
                     //물고기 유효값 처리
                     if(x<0)
                        x=0;
                    //패널 너비 = 500, 물고기 너비 = 120
                    if(x>500-120)
                     x=500-120;
                     if(y<0)
                        y=0;
                    //패널 높이 = 500, 물고기 너비 = 70
                    if(y>500-70)
                     y=500-70;

                     //물고기 이동 위치 확인하기
                     console.log("물고기 위치값 ", x, y);

                     //물고기 이동시키기
                     $fish.css({
                         left:x,
                         top:y
                     });
                    });
             })
    </script>
</body>
</html>
-----------------------------------------------------------------------------------------------------------------
*반복문

1. for문이란?

for문은 특정 구문을 여러 번 반복하고 싶을 때 상ㅇ하는 반복문이다.
특히 반복 횟수가 정해진 경우 주로 많이 사용한다.

1 ). 단일 for문

가장 일반적인 for문이다.
for문이 오직 하나인 경우를 단일 for문으로 부른다.

예)

for(초기값;조건식;증감){
	실행구문;
}

2 ). 다중 for문

다중 for문은 for문 안에 또다른 for문이 들어있는 구조를 다중 for문이라고 부른다

for(초기값;조건식;증감){
	실행구문;
	....
	for(초기값;조건식;증감){
	....
	}
}

[ 반복 구문이 한 문장일 때는 {}를 생략해도 된다.]

예)
for(초기값; 조건식; 증감)
	실행구문;

[ 반복 구문이 여러 문장일 때는 {}로 감싸 준다. ]

예)
for(초기값; 조건식; 증감){
	실행구문;
	실행구문;
	.....
}


( 실행 순서 )

1. 초깃값 부분 실행

자바스크립트에 의해 for문이 실행되면 먼저 초기값 위치 내용인

	var i = 0;

이 실행되어 i라는 변수가 만들어진다.
초깃값은 오직 한 번만 실행되며 이 후로는 실행되지 않는다는 것이다.

2. 조건식 부분 실행

다음으로 조건식 위치 내용이 실행되어 i<10을 비교한다.
이때 i가 0이니 다음과 같은 조건식이 실행된다.

0 < 10

만약 이게 거짓인 경우 for문을 빠져 나가고 참인 경우 실행구문이 실행된다.
이때 증감 위치의 내용이 아닌 실행구문이 실행되는 점을 주의깊게 봐야 한다.

3. 실행구문 실행

i < 10의 결과값이 참이 되어 실행구문인 document.write("i = " +i, "<br>")내용이 실행된다.

실행 결과 : 출력 i = 0

4. 증감 부분 실행

for문의 마지막 부분이 실행되면 for문은 위쪽으로 올라와 증감 부분을 실행한다.
이때 i++이니 i는 1이 된다.

5. 조건식 부분 실행

바로 이어서 증감 부분의 실행 결과값을 가지고 조건식을 실행한다.
이때 i가 1이니 다음과 같은 조건식이 실행된다.

i < 10

조건식이 거짓이면 for문 루프를 빠져 나가고 참이면 실행구문을 실행한다.

6. 실행구문 실행

실행 내용은 3번과 같으며 조건식이 거짓일 때까지 4번에서 6번 내용이 계속해서 반복 실행된다.

7. 루프 탈출

자바스크립트 엔진은 for문의 조건식의 결과값이 거짓이 되는 경우 for를 멈추고 다음 구문의 내용을 실행한다.
그래서 다음 실행구문이 실행되어 최종 i값 10이 출력된다.

☆ for문에서 초기 변수 이름으로 i를 많이 사용하는데 이는 iteration(되풀이)의 약자를 의미한다.

* for문에서 continue문과 break문

1. continue문

continue문은 반복 실행 중 특정 조건의 경우 실행구문을 실행하지 않고 다음 루프로 이동하게 하는 제어문이다.

예 )

for(var i=0; i<=10;i++){
            continue;①
            document.write(i+"<br>");②
        }
        document.write("최종 i=" +i+ "<br>");③

결과 )

i=11

for문의 루프는 10번 실행되긴 하지만 ①에 continue문이 있기 때문에 ② 부분이 실행되지 않아 루프에서 화면에 출력되는건 전혀 없다.
루프가 모두 끝난 후 ③ 내용이 실행돼 i 값이 출력된다.

2.break문

반복문에서 break문은 루프를 강제적으로 빠져 나오는 기능을 한다.
실행구문 중 break문을 만나면 for문은 그대로 정지되며 for루프 밖으로 빠져나가게 된다.
이후 루프 밖에 있는 다음 구문을 실행하게 된다.

예 )

for(var i=1;i<=10;i++){
            break;
            document.write(i +"<br>");
        }
        document.write("최종 i=" +i+ "<br>");

결과 )

i=1

반복문 실행 중 continue문이 실행되면 루프를 벗어나지 않고 다음 루프를 도는 반면 break문은 바로 루프를 벗어나게 된다.
그래서 실행 결과처럼 i가 1이 출력되는 이유이다.

[ 제이쿼리 eq()함수 ]

jQuery
$( '셀렉터' ).eq(숫자)  -  셀렉터에 해당하는 요소중 특정 순서의 것을 찾습니다.
$( '셀렉터' ).eq(0)  -  셀렉터에 해당하는 요소중 첫번째것 (0부터 시작)
$( '셀렉터' ).eq(2)  -  셀렉터에 해당하는 요소중 세번째것

$( '.css_test  img' ).eq(0)  -  클래스명이 css_test 인것에 속한 이미지중 첫번째 것 찾기

$( '.css_test img' ).eq( n )  -  예제에서는 변수를 받아서 문자열 처리해 원하는것을 찾았습니다.


jQuery
$( '셀렉터' ).eq(마이너스 숫자)  -  셀렉터에 해당하는 요소중 특정 뒤로부터 순서의 것을 찾습니다.
$( '셀렉터' ).eq(-1)  -  셀렉터에 해당하는 요소중 마지막것
$( '셀렉터' ).eq(-2)  -  셀렉터에 해당하는 요소중 마지막에서 두번째것

뒤에것 부터 접근 하려고 한다면 이걸 쓰세요 !
몇개 있는지 세고 최대갯수를 이용해서 접근할 필요가 없습니다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*반복문

1.while문이란

반복처리를 할 때 주로 for문을 많이 사용하지만 무한반복 처리를 하는 경우에는 while문을 사용하면 좀 더 쉽게 표현할 수 있다.

예제)
패스워드가 1234이면 "환영합니다" 메세지를 출력한 후 멈추고 그렇지 않으면 " 패스워드를 잘못 입력했습니다, 다시 입력해주세요"를 출력한 후 계속해서 입력받아 주세요

for문으로 만들경우

1.
for(var i=0;i<100000;i++){
var value = prompt("패스워드를 입력해주세요");
	if(value=="1234"){
		alert("환영합니다");
		break;
	}else{
		alert("잘못 입력했습니다. 다시 입력해주세요.");
	}
}

2.
for(;;){
	var value = prompt("패스워드를 입력해주세요.");

	if(value=="1234"){
		alert("환영합니다.");
		break;
		}
	else{
		alert("잘못 입력했습니다. 다시 입력해주세요.");
	}
}

for문을 이런 목적으로 사용하는건 적합하지 않다.

while문으로 만들 경우

while(true){
	var value = prompt("패스워드를 입력해주세요");

	if(value=="1234"){
		alert("환영합니다");
		break;
		}
	else{
		alert("잘못 입력했습니다. 다시 입력해주세요");
	}
}

2. while문을 사용하는 경우

1). 무한반복 처리

2). 파일 읽기

3). 파일 쓰기

4). 파일 전송

5). DB데이터 출력하기

자바스크립트에서는 파일을 읽고 쓰는 작업을 거의 하지 않지만 Java와 php 같은 일반 프로그래밍에서는 위의경우에 for보다는 while을 주로 사용한다.

3. 사용법

while(조건식){
	실행구문;
	....
	}

[1]. 조건식

while문에서는 for문과 달리 초깃값이나 증감 처리를 하는 부분이 없다. 오직 조건식 부분만 있다.
이것만 보더라도 while문과 for문과의 차이점을 충분히 알 수 있다.

[2]. 실행구문

조건식이 참일 동안 반복해서 실행되는 구문이다.

[ 랜덤 숫자 만드는 방법 ]

var num = parseInt(Math.random()*원하는숫자)+1
마지막에 +1를 해주는 이유는 0부터 시작하기 때문이다.
만약에 숫자 0을 포함한 값을 원한다면 +1을 따로 붙여주지 않아도 괜찮다.
다만 0부터 시작하기 때문에 예를들어 6이라는 숫자를 넣게되면
[0,1,2,3,4,5]까지의 숫자가 나오게 된다.

*for와 while의 차이점

1. for문 사용분야

▶반복 횟수가 정해진 경우
▶배열과 함께 주로 많이 사용

2. while 사용분야

▶무한 루프나 특저 조건에 만족할 때까지 반복해야 하느느 경우
▶주로 파일 읽고 쓰기에 사용

* while문을 for문처럼 사용하는 경우

일반적으로 for문 대신 while문으로, while문 대신 for문으로 사용할 수 있다.
만약 while문을 for문처럼 사용하고 싶다면 다음처럼 사용하면된다.

1.for문을 사용한 경우

for(초깃값;조건식;증감){
	실행구문;
	}

2.while문을 사용한 경우

초깃값;
while(조건식){
	실행구문;
	증감;
}

* while문에서 continue문과 break문

while문에서도 continue문과 break문을 사용할 수가 있다.

1. continue문

예)
while(조건식){
	.....
	continue;
	......
}
continue문은 for문과 while문에서 똑같이 동작한다.
continue문을 만나면 continue문 이후의 구문을 실행하지 않고  바로 while문 위쪽으로 올라가 조건식을 실행한다.

사용 예)

var i=1;
       while(i<=10){
           i++;
           continue;

           document.write(i+"<br>");
       }
       document.write("최종 i= "+i+"<br>");

결과 )

최종 i = 11

while문의 루프는 10번 실행되긴 하지만 continue문이 document.write() 앞에 있어서 화면에 출력되는 건 전혀 없다.
루프가 모두 끝난 후 document.write("최종 i= "+i+"<br>"); 내용이 실행돼 i 값 11이 출력된다.

* break문

while(조건식){
	.....
	break;
	....
}

실행구문 중 break문을 만나면 while문은 그대로 정지되며 while문은 루프를 빠져나온다.
즉, while문을 강제로 빠져 나오고 싶을 때 사용하는 명령어가 break문이다.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* 함수 기초

1. 함수란?

함수는 특정 기능을 하는 구문(알고리즘, 로직)을 독립된 부품으로 만들어 재사용하고자 할 때 사용하는 문법이다.
일종의 포장 방법이라고도 말할 수 있다.

2. 함수와 관련된 여러 가지 내용

1) . 매개변수(파라미터 또는 인수라고도 함)

2) . 지역변수와 전역변수

3) . 리턴값

4) . 함수 호출

5) . 함수 정의

6) . 함수 리터럴

7) . 함수 이름 규칙

3. 함수 종류

첫 번째 : 일반적인 함수

function 함수이름(){
	실행구문'
	}

두번째 : 매개변수가 있는 함수

function 함수이름([매개변수1[, 매개변수2[....]]){
	실행구문;
	}

세번째 : 리턴값이 있는 함수

function 함수이름([매개변수 1[, 매개변수 2[....]]){
	실행구문;
	return 실행결과 ;
	}

[ 용어정리 ]

function

변수 만들 때 사용하는 var 키워드와 마찬가지로 function은 함수를 만들 때 사용하는 키워드다.
풀어 설명하면 자바스크립트 엔진은 소스를 해석하는 과정에 function 키워드를만나면 "여기는 함수를 만들라는 의미구나" 라고 해석해 함수를 만들게 된다.

함수이름

함수이름은 변수이름과 마찬가지로 유일해야 하며 만들려고 하는 함수의 기능을 함축한 의미가 담긴 이름으로 만들면 된다.

{ }
함수 영역을 나타낸다.

함수이름()

함수이름+()로 작성하면 함수가 동작한다.
이 작업을 함수호출이라고 부른다.
일종의 전원 버튼을 누르는 것과 같다고 생각하면 된다.

예 )

function test1(){
            document.write("안녕하세요");
        }
        test1();

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* 지역변수 와 전역변수 차이

지역변수와 전역변수를 만드는 방법은 동일하다.
다른점이라면 만드는 영역이 다른 것이다.
즉, 전역 영역에 변수를 만들면 전역변수라 부르고 함수 내부 영역인 지역 영역에 변수를 만들면 지역변수라고 부른다.

예)

<script>
	전역 영역
	function fun1(){
		지역 영역1
	}
	function fun2(){
		지역 영역2
	}
</script>

* 매개변수가 있는 함수 만들기

사용법)

function 함수이름([매개변수1, 매개변수2....]){
	실행구문;
	}

매개변수는 변수의 일종이며 함수 외부에서 함수 내부로 데이터를 전달할 때 매개체 역할을 하는 변수다.

예)

function hello(value){
	var name = value;
	document.write(name+"님 환영합니다");
}

hello("우정호");

결과)

우정호님 환영합니다.

또한 매개변수는 지역변수이기도 하다.
이는 함수가 실행될 때 만들어지고 함수가 종료되면 자동으로 사라진다는 의미다.
지역변수가 매개변수와 다른 점은 매개변수를 만들 때 var를 붙이지 않는다는 것이다.

매개 변수 개수 역시 일반 변수처럼 열 개든 스무 개든 만들고 싶은 만큼 만들 수 있다.
다음처럼 매개변수 하나를 추가해 방문 횟수를 나타낼 수도 있다.

예)

function hello(name, count){
	document.write(name+"님"+count+"번째 방문을 환영합니다");
	}
hello("딴동네",10);


함수 매개변수에 데이터를 전달하는 방법은 함수를 호출할 때 데이터를 넣어 호출해 준다.
만약 매개변수가 두 개면 함수 호출 시 데이터를 두 개 넣어 준다.

예)
function hello(name, count){
	document.write(name+"님 " + count + "번째 방문을 환영합니다.");
}
hello("딴동네", 10);

hello()를 실행하면 " 딴동네 " 데이터는 name에, 10은 count에 저장된다.
이는 일반 변수를 만들면서 데이터 초기화시키는 것과 같다.

name = "딴동네";
count = 10;

그리고 데이터를 보내는 위치는 정해져 있기 때문에 위치에 맞춰 데이터를 보내야 한다.

예를 들어 hello(10, "딴동네"); 처럼 함수를 호출하면 매개 변수에는 다음처럼 저장돼 예상과는 전혀 다른 값이 출력된다.

name = 10;
count = "딴동네";

실행결과 )

10님 딴동네번째 방문을 환영합니다.

또한 다음과 같이 매개변수가 두 개인데 값을 하나만 보내는 경우

hello("딴동네");

name에는 딴동네, count에는 undefined가 저장된다.

결과 )

딴동네님 undefined번째 방문을 환영합니다.

* argument란?

예 )
function showInfo(){
	alert("안녕하세요."+userName+"님의 나이는 "+age+"입니다.");
	}
showInfo("우정호", 26);

결과 )

Uncaught RefereceError: userName is not defind

함수 호출 시 값을 넘겼지만 값을 받는 매개변수가 선언돼 있지 않기 때문에 값이 찍히지 않았다.
좀더 설명하자면 자바스크립트는 userName을 발견하면 우선 지역변수와 매개변수 중에서 userName을 찾게 된다.
만약 발견하지 못한다면 전역변수에서 찾아 사용한다.
전역변수에도 없다면 userName이란 변수가 없는 걸로 판단하고 에러를 발생시킨다.

매개변수를 선언하지 않고 매개변수 값에 접근하는 방법이 없는 것은 아니다. 
이런 경우를 위해 자바스크립트 함수는 arguments라는 객체를 기본으로 제공한다.
arguments에는 모든 매개변수 값이 들어 있다.

정리해보면

매개변수의 모든 정보가 담겨있는 장소(객체)이다.

배열은 아니지만 배열처럼 사용하면 된다.

매개변수의 개수는 arguments의 length 프로퍼티를 이용하면 알 수 있다.

사용 예)

function showInfo(){
	console.log("0 = "+arguments[0]);
	console.log("1 = "+arguments[1]);
	alert("안녕하세요. "+arguments[0]+"님의 나이는 "+arguments[1] + "입니다.");
}
showInfo("딴동네", 30);

* 리턴값이 있는 함수 만들기

사용법 )

function 함수이름([매개변수1, 매개변수2, . . .]){
	실행구문;
	[return 리턴값;]
	}

호출

var 변수 = 함수이름();

리턴값(return)이란?

함수 내부는 함수라는 철벽으로 포장돼 있기 때문에 한번 실행되면 함수 외부에서 접근할 수 없다고 했다.
이때 매개변수를 활용하면 함수 내부로 데이터를 전달할 수 있다고 배웠었다.
리턴값은 매개변수와 반대되는 값이다.
값이 함수 외부에서 함수 내부로 들어오는 입력값이라면 리턴값은 함수 내부에서 처리한 결과값을 함수 외부로 전달하기 위해 사용하는 일종의 출력값이다.
이때 사용하는 구문이 바로 return 명령어이다.

예 )
function sum(num1, num2){
        var result = num1+num2;
        return result;
    }
    var value = sum(10,20);
    document.write("두 수의 합은 = " +value);

retrun문을 이용해서 함수 내부에서 처리한 결과값을 함수 외부로 전달했다.
즉, 다음 내용이 샐행되면

var value = sum(10,20);

우리가 쉽게 알수 있는 구문처럼 함수 내부에서 리턴한 값 30이 value 변수에 대입된다고 생각해보자

실행전 = var value = sum(10,20);

실행후 = var value = 30;

*return문의 또 다른 용도
return문은  함수 내부의 데이터를, 함수를 호출한 곳으로 전달할 때도 사용하지만 함수를 즉시 빠져 나오는 기능도 한다.

function sample(){
        var sum = 0;
        var count=1;

        //무한 루프 시작
        while(true){
            var value = parseInt(prompt("수 입력","1"));
            if(value==0){
                document.write("종료합니다");
                //함수 탈출
                return;//①
            }
            //입력값 더하기
            sum+=value;
            //입력값 출력하기
            document.write(count+". "+sum+"<br>");
            count++;
        }
	//②
        document.write("총 " + count + "번 실행했습니다");
    }

    //함수 호출
    sample();

앞에서 설명한 것처럼 return의 또 다른 기능은 함수를 멈추고 즉시 탈출할 수 있는 기능을 가지고 있다.
언뜻 보면 break와 비슷해 보일 수 있지만 완전히 다른 동작을 나타낸다.
만약 예제에서 ①의 return문을 break문으로 변경해 실행하는 경우 자바스크립트는 while()루프를 빠져 나온 후 ② 구문을 실행한다.

이와 달리 return문은 실행 즉시 함수를 탈출하기 때문에 총 반복 횟수를 출력하는 구문을 실행하지 않게 된다.
정리하자면 break문은 루프 탈출 기능이고, return문은 함수 탈출이다.

*함수 이름 만들때 주의할 점

1. 숫자로 시작하면 안된다.

2. 대소문자 구분 :  name과 Name은 완전히 다른 변수이다.

3. 낙타_표기법(camelcase) : 여러 단어가 조합되는 경우 다음처럼 소문자 대문자를 번갈아 넣어 표기해 줘야 한다.

*변수와 함수와의 관계

1. 변수에 함수 저장하기

함수 역시 변수에 넣을 수 있는 데이터 값이다.
예를 들어 설명하면 변수에 문자열 데이터를 넣는 것처럼, 변수에 함수라는 데이터를 넣을 수도 있다.

예)
function hello(name){
	document.write(name+"님 환영합니다.");
}
hello("웹동네");
var func = hello;
func("딴동네");

결과)

웹동네님 환영합니다.
딴동네님 환영합니다.

예제처럼 변수에 함수를 저장하면 변수를 함수처럼 사용할 수 있다.

2.매개변수 값으로 함수 사용하기

매개변수 역시 변수이기 때문에 매개변수 값으로 함수를 사용할 수 있다는 의미와도 같다.

예)

function hello1(){
	alert("hello.");
}
function hello2(){
	alert("안녕하세요.");
}

function execute(func){
	func();
}

execute(hello1);
execute(hello2);

결과)

hello.
안녕하세요.

예제처럼 함수를 매개변수 값으로 넘겨 매개변수를 일반 함수처럼 사용할 수 있다.

[버튼을 클릭할 때마다 매개변수 값으로 넘긴 hello 함수가 호출된다.]

function hello(){
	document.write("안녕하세요. 환영합니다.");
}
$("#btn").click(hello);

[1초마다 매개변수 값으로 넘긴 익명 함수가 호출된다.]

setInterval(function(){
	document.write("안녕하세요. 환영합니다.");
},1000);

이처럼 매개변수 값으로 함수를 넘겨 사용하는 경우는 흔히 볼 수 있다.

3. 리턴값으로 함수 사용하기

함수는 어떤 값(데이터)이든 리턴할 수 있다.
이는 리턴값으로 함수를 리턴할 수 있다는 의미이기도 하다.

예)

function createHello(){
	function hello(user){
		document.write(user+"님 방문을 환영합니다.");
	}
	return hello;
}

var result = createHello();
result("웹동네");

결과)
웹동네님 방문을 환영합니다.

createHello() 함수 내부에 있는 hello() 함수를 리턴값으로 하면 외부에서 사용할 수 있게 된다.

* 함수 리터럴과 익명 함수

다음 코드는 앞의 예제들에서 무수히 많이 사용한 익명 함수(이름 없는 함수)를 이벤트 리스너로 등록한 예제이다.

$("#btnStart").click(function(){
	alert("안녕하세요. 환영합니다.");
});

참고로 이벤트 리스너는 이벤트가 발생할 때 실행되는 함수를 의미한다.
이번 레슨에서는 바로 이 익명함수에 대한 내용을 다룬다.
먼저 익명 함수를 이해하기 위해서는 리터럴의 정체를 알아야 한다.

1. 리터럴이란?

데이터를 만드는 방법은 크게 리터럴 방식과 객체 방식 두가지가 있다.
리터럴이란? 직역하자면 원시라는 뜻을 가지고 있으며 지금까지 데이터를 만들 때 사용한 방식이 바로 리터럴 방식이였다.
먼저 리터럴 방식과 객체 방식이 어떤 차이가 있는지 보면 될 것 같다.

타입		리터럴 방식		객체 방식

숫자		var age=10;		var name = new Number(10);

문자		var name="ddandongne";	var name = new String("ddandongne");

불린		var cold=true;		var cold = new Boolean(true);

배열		var aryData=["data1",...];	var aryData = new Array("data1", "data2", "data3");

숫자데이터나 문자 데이터 그리고 배열 데이터 같은 기본적인 데이터를 생성할 때는 리터럴 방식을 더 많이 사용한다.
이유는 리터럴 방식이 훨씬 간결하고 편리하기 때문이다.

예를 들어 숫자 10을 가진 변수를 만든다고 가정 했을 때, var a = 10의 리터럴 방식 대신 var a = new Number(10)식의 객체 방식으로 만들면 아마도 만들 때마다 화가 날 것이다.
여기서 놀라운 사실을 하나 알려주자면, var a = 10은 자바스크립트 엔진에 의해서 var a = new Number(10)으로 자동변환되어 실행된다.
일종의 암시적 형변환이 일어난다고 보면 된다.

2. 함수 리터럴이란?

함수 역시 리터럴 방식으로 함수를 만드는 방법을 제공한다.
함수 리터럴 방식으로 함수를 만드는 방법은 간단하다.
다음과 같이 함수이름을 주지 않고 만들면 된다.

[ 리터럴 방식 ]
var hello = function(name){
	alert(name+"님 환영합니다.");
}
hello("ddandongne");

[ 일반적인 방식과 객체 방식 ]
//일반적인 방식

function hello(name){
	alert(name+"님 환영합니다.");
}
hello("ddandongne");

//객체 방식

var hello2 = new Function("name", "alert(name+'님 환영합니다.');");
hello2("ddandongne");

함수의 경우는 사용하려는 용도에 따라 리터럴 방식과 일반적인 방식을 같이 사용하기 때문에 무조건 리터럴 방식으로 만들진 않습니다.

그리고 함수 리터럴 방식으로 만들어진 이름 없는 함수를 우리는 익명 함수라고 부른다.

3. 익명 함수란?

(1) . 익명 함수 풀이 버전

익명 함수란?

함수 리터럴 방식으로 만들어진 이름 없는 함수를 말한다.
이벤트 처리 등에 익명 함수를 활용하면 다음과 같이 좀더 간결하게 만들 수 있다.

[ 익명 함수 활용 전 ] 

function hello(){
	alert("안녕하세요. 환영합니다.");
}
$("#btn").click(hello);

[ 익명 함수 활용 후 ]

$("#btn").click(function(){
	alert("안녕하세요, 환영합니다.");
});

2. 익명 함수 vs 일반 함수

그렇다면 함수를 만들 때 어떤 경우에 익명 함수로 만들고 또 어떤 경우에 일반 함수로 만들어야 할까?
이에대한 명쾌한 답은 존재한다.

함수를 익명 함수로  만드는 경우는 주로 함수를 재사용하지 않을 경우다.
다음 코드를 보면

$("#btn").click(function(){
	alert("안녕하세요. 환영합니다.");
});

click()의 매개변수로 넘어 간 익명 함수는 click 이벤트 리스너 함수로만 사용할 뿐 이름이 없기 때문에 함수를 다시 호출하고 싶어도 호출할 방법이 없다.
이와 달리 함수를 일반 방식으로 만들면,

function hello(){
	alert("안녕하세요. 환영합니다.");
$("#btn").click(hello);

이름이 있는 함수이기 때문에 언제든지 hello()함수를 호출해서 재사용할 수 있다.

* .appen() [제이쿼리 메소드]

.append() 메소드는 선택된 요소의 마지막에 새로운 HTML 요소나 콘텐츠를 추가한다.

예)
$(target).append(source)

다음 메소드를 사용하면 기존 요소의 내부에 새로운 요소나 콘텐츠를 추가할 수 있다.

메소드	설명
.append()		선택된 요소의 마지막에 새로운 요소나 콘텐츠를 추가한다.

.prepend()	선택된 요소의 첫번째에 새로운 요소나 콘텐츠를 추가한다.

.appendTo()	선택된 요소를 해당 요소의 마지막에 추가한다.

.prependTo()	선택된 요소를 해당 요소의 첫번째에 추가한다.


아래와 같이 HTML 요소가 있을 때

<ol id="list">
    <li>첫 번째 아이템</li>
    <li>두 번째 아이템</li>
</ol>

(1) .append() 메소드를 이용하면, 두번째 <li> 뒤에 새로운 HTML 요소를 추가할 수 있다.

$("#list").append("<li>새로 추가된  아이템</li>");

(2) .prepend() 메소드는 선택한 요소의 첫번째에 새로운 요소나 콘텐츠를 추가한다.

예)

$(target).prepend(source)

source 객체를 target 객체의 첫번째에 추가한다.

아래와 같이 HTML 요소가 있을 때,

<ol id="list">
    <li>첫 번째 아이템</li>
    <li>두 번째 아이템</li>
</ol>

(3) .append() 메소드를 이용하면, 첫번째 <li>에 앞에 새로운 HTML 요소를 추가할 수 있다.

$("#list").prepend("<li>새로 추가된  아이템</li>");


.appendTo() 메소드는 선택한 요소를 '해당 요소의 마지막'에 추가한다.
동작은 .append() 메소드와 동일하지만, 소스(source)와 타겟(target)의 위치가 서로 반대로 되어 있다.

예)

$(source).appendTo(target)

source 객체를 target 객체의 마지막에 추가한다.

아래와 같이 HTML 요소가 있을 때,

<p>안녕하세요.</p>
.appendTo() 메소드를 이용하면, 첫번째 <p>에 뒤에 새로운 HTML 요소를 추가할 수 있다.

$("<span>jQuery입니다.</span>").appendTo("p");


(4) .prependTo() 메소드
.prependTo() 메소드는 선택한 요소를 '해당 요소의 첫번째'에 추가한다.
동작은 .prepend() 메소드와 동일하지만, 소스(source)와 타겟(target)의 위치가 서로 반대로 되어 있다.

예)

$(source).prependTo(target)

source 객체를 target 객체의 첫번째에 추가한다.

아래와 같이 HTML 요소가 있을 때,

<p>안녕하세요.</p>
.prependTo() 메소드를 이용하면, <p>요소 앞에 새로운 HTML 요소를 추가할 수 있다.

$("<span>jQuery입니다.</span>").prependTo("p");

* 함수 정의 방법 4가지

함수 정의, 즉 함수를 만드는 방법은 1장에서 배운 일반 방법 이외에도 3가지가 더 있다.
1장에서 소개하지 않은 이유는 1장에서 배운 내용이 가장 기본이면서 정석이며 일단 이 기본에 익숙해져야 나머지 함수 만드는 방법도 수월하게 이해할 수 있기 때문이다.

1. 첫 번째 : function 키워드를 이용하는 법

예)

function 함수이름([매개변수1,....]){
	[return 반환값]
}
함수 이름(매개변수 값,..)

2. 두 번째 : 함수 리터럴을 이용하는 법

var 변수이름 = function([매개변수1,...]){
	[return 반환값]
}
변수이름(매개변수 값,...)

설명 )

리터럴에서 다룬 내용이다.
함수 리터럴을 이용해서 익명 함수를 만든 후 변수에 저장하는 방식으로도 함수를 만들 수 있다.
함수 호출에서 알 수 있듯이 일반 정의 방법이든, 리터럴 정의 방법이든 함수 호출 방식은 동일하다.

중요*)

실무에서 종종 함수 리터럴 방식이 다음처럼 변형돼 사용되는 경우를 볼 수 있을 것이다.

//리터럴 방식으로 클래스의 멤버함수(메서드)를 만들 때

var myClass = {
	test : function(){

	}
}

//Object 방식으로 클래스의 멤버함수(메서드)를 만들 때

function MyClass(){
	this.test = function(){
	}
}

//prototype 방식으로 클래스의 멤버함수 만들 때

function MyClass(){

}
MyClass.prototype.test=function(){

}

3. 세 번째 : Function 객체를 이용해서 정의하는 법

var 함수이름 = new Function([매개변수1...], 함수본체);
함수 이름(매개변수 값, ...);

- 이 방법은 실무에서 거의 사용하진 않는다.
그냥 이런 식으로도 함수를 만드는 방법이 있구나, 라는 정도로 알고 있으면 될 것 같다.

4. 네 번째 : 익명 함수 확장을 이용해 정의하는 방법 

(function(name){
	document.write(name+"님 환영합니다.");
})("ddandongne");

이 방법은 익명 함수의 확장이다.
이 정의 방법은 함수를 만들어 재사용하는 것이 목적이 아닌 다른 함수 간의 충돌을 막기 위해 사용한다.
또 jQuery 플러그인 제작 시 다른 플러그인과 충동을 막기 위한 방법으로 많이 사용한다.

* 함수 종류

함수는 개발자가 직접 만들어서 사용하는 사용자 정의 함수와 자바스크립트에서 제공하는 쿠어 라이브러리로 나눌 수 있다.
이번 레슨에서는 사용자 정의 함수를 만들기 위해 사용하는 문법의 종류를 간단하게 살펴보자

1. 함수 분류

1) . 사용자 정의 함수

사용자가 필요한 기능을 직접 만든 함수를 말하며 우리가 앞의 예제들에서 직접 만든 함수가 모두 사용자 정의 함수이다.

2). 자바스크립트 코어 함수

자바스크립트가 기본적으로 제공하는 함수를 코어 함수라고 부르며, 형변환에서 사용한 parseInt(),parseFloat() 함수 등이 자바스크립트 코어 함수에 속한다.

2. 사용 방법에 따른 함수 종류

함수 종류		내용

일반 함수		가장 일반적으로 사용한 함수를 얘기한다.

중첩 함수		함수 안에 함수가 있는 경우 중첩되었다라고 하며 이때 함수 안에 있는 함수를 중첩 함수라고 한다.

콜백 함수		함수 실행결과값을 리턴이 아닌 매개변수로 넘어온 함수를 호출해서 넘겨주는 방식을 콜백이라 하며 이때 매개변수로 넘어온 함수를 콜백 함수라고 한다.

클로저 함수	일반적인 함수의 경우 함수 호출에 의해 함수 내부의 실행구문을 모두 실행하게 되면 함수 내부에서 만든 지역변수가 자동으로 사라지지만 어떤 경우에는 사라지지 않고 남는 경우가 있다.
이 현상을 클로저라고 하며 이 현상을 일으키는 함수를 클로저 함수라고 한다.

멤버함수(메서드)	멤버함수는 클래스 내부에 만들어지며 주로 메서드라고 불린다.

* 중첩 함수

1. 중첩 함수란?

함수 내부에는 일반 구문뿐 아니라 새로운 함수 구문까지도 넣을 수 있다.
이때 함수 내부에 만들어지는 함수를 중첩 함수라고 부른다.

function outer(){
	//inner를 중첩함수라고 부른다.
	function inner(){
	}
	inner();
}

outer();

함수 내부에는 중첩 함수를 하나 이상 만들 수 있다.

2. 중첩 함수 사용

1) . 내부 전용 함수

중첩 함수는 함수 내부의 지역변수처럼 함수 내부에서만 사용할 수 있다.
즉, 함수 내부에서만 사용하는 기능을 중첩 함수로 만들어 사용하는 것이다.

일반적으로 중첩 함수는 다음과 같이 이름이 없는 이벤트 리스너로 많이 사용된다.

* setIntval() 함수는 함수는 특정 시간마다 첫 번째 매개변수로 넘긴 함수를 호출하는 기능을 가지고 있다.


*콜백 함수

1. 콜백 함수란?

예)
function 함수이름(callback){
	.	.	.
	callback(결과);
}

콜백 함수는 주로 함수 내부의 처리 결과값을 함수 외부로 내보낼 때 사용한다.
일종의 return문과 비슷한 기능을 한다고 생각하면 된다.

콜백 함수를 사용하는 구조를 살펴보면 위의 문법처럼 특정 함수의 매개변수 값으로 콜백 함수를 넘긴 후 처리 결과를 콜백 함수의 매개변수에 담아 콜백 함수를 호출하는 구조를 가지고 있다.
이 구조를 사용하면 로직 구현 부분과 로직 처리 부분을 나눠 코딩할 수 있게 된다.
이에 따라 로직 구현 부분은 동일하고 로직 처리 부분을 다양하게 처리해야 하는 경우 유용하게 사용할 수 있다.

예시)

 function sum(num1,num2,callback){
          var temp = num1+num2;
          callback(temp);
      }
      function result(value){
          document.write("두 수의 합은 = "+ value +"입니다.");
      }
      sum(10,20,result);

처음 function sum(num1,num2,callback)이라는 매개변수 3개를 만들어 준다.

var temp 안에 num1+num2에 대한 값을 넣어준다.
callback이라는 매개변수 안에 또 temp라는 매개변수 값을 넣어준다.

function result(value)함수를 만들어 주고
document.write("두 수의 합은 ="+ value + "입니다."); 라는 구현 값을 넣어준뒤

sum(10,20,result);라는 함수 호출을 해주는데 result라는 매개변수 값 안에 callback이라는 변수가 들어가게 된다.

4. 동기 vs 비동기

마지막으로 콜백 함수를 확실히 이해하기 위해서는 동기와 비동기에 대한 개념을 알아야 한다.

1 ) . 동기란

일반적으로 함수가 호출된 후 끝날 때까지 다음 구문을 실행하지 않고 대기하고 있는 경우를 우리는 동기하고 한다.

예)
alert("안녕하세요");
document.write("alert() 동작이 끝나야 이 내용은 실행됩니다.");

alert() 함수가 실행되면 알림 메세지 창이 활성화되는데 이때 알림 메세지 창의 확인 버튼을 눌러야지만 다음 구문이 실행된다.
이처럼 특정 동작이 완료될 때까지 기다리는 경우를 동기 방식이라고 부른다.

2 ) . 비동기

비동기는 동기와 반대되는 개념이다.
일반적으로 함수가 호출된 후 끝날 때까지 기다리지 않고 바로 다음 구문을 실행하는 경우를 우리는 비동기라고 한다.

예)
var count = 1;

setInterval(function(){
	document.write("2. count = "+count);
},3000);

document.write("1.ajax()동작이 모두 끝나지 않았어도 바로 실행된다.");

setInterval() 함수가 실행되면 자바스크립트 엔진은 동기 함수와는 달리 3초를 기달리지 않고 바로 다음 구문을 실행해 메세지가 출력된다.
이 후 setInterval() 첫 번째 매개변수 값으로 넘긴 콜백 함수는 3초후에 실행된다.

이처럼 특정 동작이 완료될 때까지 기다리지 않고 바로 다음 구문을 실행하는 경우를 비동기 방식이라고 부른다.

여기서 비동기를 알아야 하는 이유는 콜백 함수가 주로 비동기 함수의 결과값을 처리하기 위한 도구로 많이 사용되기 때문이다.

5. 콜백 함수를 실무에서 사용하는 법

1) . 이벤트 리스너로 사용

$("#btnStart").click(function(){
	alert("클릭되었습니다.");
});
jQuery에서 클릭과 같은 이벤트를 처리하기 위해 등록하는 이벤트 리스너가 바로 콜백 함수이다.

2) . 타이머 실행 함수로 사용

setInterval(function(){
	alert("1초마다 한 번씩 실행되요.");
},1000);

setInterval() 함수는 특정 시간마다 첫 번째 매개변수 값으로 넘긴 함수를 호출해주는 기능을 가진 자바스크립트 코어 라이브러리 함수 중 하나이다.
이때 매개변수 값으로 넘기는 함수가 바로 콜백 함수이다.

3) . Ajax 결과값을 받을 때 사용

$.get("http://www.webdongne.com/test.php", function(){
	alert("정상적으로 서버 통신이 이뤄졌습니다.");
});

서버와 데이터를 주고받을 때 사용하는 jQuery Ajax 기능들에서 결과물을 받을 때 콜백 함수가 사용된다.

4) . jQuery 애니메이션 완료

$("#target").animate({
	left:100,
	opacity:1
},2000,"easeOutQuint", function(){
	alert("애니메이션이 완료되었습니다.");
});

HTML 요소를 멋지게 움직이는 jQuery 애니메이션 기능에서 애니메이션이 모두 끝났을 때 실행하는 함수 역시 콜백 함수이다.

이처럼 콜백 함수는 로직 구현 부분과 로직 처리 부분을 나눠 작업할 때 주로 사용한다.

* 클로저 함수

1. 클로저란?

클로저는 함수 내부에 만든 지역변수가 사라지지 않고 계속해서 값을 유지하고 있는 상태를 말한다.

예)

function 외부함수(){
	var 변수A;
	function 내부함수(){
	변수A 사용;
	}
}

클로저는 일종의 현상이기 떄문에 정해진 문법은 없다.
그래도 표현하자면 위의 문법처럼 내부함수에서 내부함수를 포함하고 있는 함수(외부함수)의 변수A를 사용하는 구조인 경우로 표현할 수 있으며 내부함수를 클로저 함수라고 부른다.
또한 변수 A는 클로저 현상에 의해 외부함수() 호출이 끝나더라도 사라지지 않고 값을 유지하게 된다.

2. 예제

1) . 일반 함수인 경우

function addCount(){
	var count=0;
	count++;
	return count;
}

document.write("1. count = "addCount() , "<br>");①

document.write("1. count = "addCount() , "<br>");②

document.write("1. count = "addCount() , "<br>");③


결과)

1. count = 1

2. count = 1

3. count = 1

① addCount() 함수가 호출되면 지역변수 count가 0으로 초기화 됨과 동시에 만들어진다.
다음으로 증가 연산자에 의해 1이 되며 이 값을 리턴하기 떄문에 1이 출력된다.
그리고 모든 구문을 실행한 함수는 종료된다.
이와 동시에 함수 내부에 만들어진 count는 메모리에서 흔적조차 없이 사라진다.

②, ③ 역시 ①과 동일하게 실행되기 때문에 1이 출력된다.

이처럼 일반적인 경우 함수 내부에 위치하고 있는 지역변수는 함수가 종료됨과 동시에 메모리에서 사라지게 된다.
근데 어떤 경우에는 지역변수가 사라지지 않고 계속 값을 유지하는 경우가 있다.

2). 클로저를 이용한 경우

function createCounter(){
	var count=0;
	function addCount(){
	count++;
	return count;
	}
	return addCount;
}

var counter = createCounter();①

document.write("1. count = " + counter(), "<br>");②
document.write("1. count = " + counter(), "<br>");③
document.write("1. count = " + counter(), "<br>");④

결과)

1. count = 1

2. count = 2

3. count = 3

①createCounter() 함수가 호출되면 지역변수 count가 0으로 초기화됨과 동시에 만들어진다.
그리고 내부에 addCount()라는 함수도 만들어지고, 마지막으로 addCount() 함수를 리턴하고 createCounter()  함수는 종료된다.
②에서 counter()가 실해되면 addCount() 함수가 실행되어 증가 연산자에 의해서 count 값이 0에서 1로 증가하기 때문에 1이 출력된다.

③, ④둘 모두 counter()가 실행되면 count가 값이 증가하기 때문에 2와 3이 각각 출력된다.

이처럼 변수가 메모리에서 제거되지 않고 계속해서 값을 유지하는 상태를 클로저라고 부르며 내부에 있는 함수를 우리는 클로저 함수라고 한다.
여기서 주의할 사항은, 클로저 예제를 찾다 보면 함수 내부에서 리턴값으로 함수를 리턴하는 예제를 쉽게 찾을 수 있는데, 이렇다 보니 함수 내부에서 함수를 리턴하는 구조를 가진 경우만이 오직 클로저라고 착각하는 경우가 많다.
하지만 다음과 같은 경우에도 클로저가 적용됐다고 볼 수 있다.

예제) 버튼을 클릭하면 클릭할 때마다 1씩 증가시켜주세요

$("#btn").click(function(){
	start();
	document.write("시작합니다.");
});

function start(){
	var count=0;
	setInterval(function(){
		count++;
	document.write(count);
	},1000);
}

버튼을 클릭하면 start()가 실행되면서 지역변수인 count 변수가 만들어지고 setInterval() 이 실행된 후 함수가 종료되며 지역변수도 같이 사라져야 하는데, setInterval의 익명 함수에서 count를 사용하고 있기 때문에 값이 계속해서 증가하는 것을 볼 수 있다.
이때 이 익명 함수를 클로저 함수라고 부른다

이처럼 클로저는 변수가 사라지지 않고 계속해서 값을 유지하는 상태를 모두 클로저라고 한다.

3. 클로저를 사용하면 좋은 점

연관 있는 변수와 기능(중첩 함수)을 하나의 함수로 묶어 독립적으로 실행시킬 수가 있다는 점이다.

달리 말하면 함수 내부에 데이터가 만들어지기 때문에 함수 외부에서 수정할 수 없는 보호된 데이터를 만들 수 있다.(객체지향 프로그래밍에서는 이를 private데이터라고 부른다.)

* .attr()

.attr()은 요소(element)의 속성(attribute)의 값을 가져오거나 속성을 추가합니다.

문법 1)

.attr( attributeName )
선택한 요소의 속성의 값을 가져옵니다. 예를 들어

$( 'div' ).attr( 'class' );
는 div 요소의 class 속성의 값을 가져옵니다.

문법 2)

.attr( attributeName, value )
선택한 요소에 속성을 추가합니다. 예를 들어

$( 'h1' ).attr( 'title', 'Hello' );
는 h1 요소에 title 속성을 추가하고 속성의 값은 Hello로 합니다.

* .each()

$.each()메서드는 object 와 배열 모두에서 사용할 수 있는 일반적인 반복 함수이다.
다시 말해, 배열과 length 속성을 갖는 배열과 유사 배열 객체들을 index를 기준으로 반복할 수 있다.
첫 번째 매개변수로 배열이나 객체를 받는다.
그리고 두번째 매개변수로 콜백함수를 받으며 콜백함수의 인자로는 인덱스와 값을 인자로 갖는다.

예)
// 객체을 선언
var arr= [ 
	{title : '다음', url : 'http://daum.net'},
	{title : '네이버', url : 'http://naver.com'}
	];
//$.each() 메서드의 첫번째 매겨변수로 위에서 선언한 배열은 전달

$.each(arr, function (index, item) {
// 두 번째 매개변수로는 콜백함수인데 콜백함수의 매개변수 중 
// 첫 번째 index는 배열의 인덱스 또는 객체의 키를 의미하고 
// 두 번째 매개 변수 item은 해당 인덱스나 키가 가진 값을 의미합니다.

	var result = '';
	result += index +' : ' + item.title + ', ' + item.url; console.log(result);

// 0 : 다음, http://daum.net 
// 1 : 네이버, http://naver.com

 })
위에서 첫 번째 매개변수에 배열을 전달했습니다. 배열을 받게 되면 콜백함수의 index, item 은 배열의 인덱스와 값을 가리키게 됩니다.


다음의 예제는 배열대신 객체를 전달하는 경우입니다.

// 객체를 선언
var obj = {
 daum: 'http://daum.net',
 naver: 'http://naver.com' 
};

// $.each() 메서드의 첫번째 매겨변수로 위에서 선언한 객체를 전달 

$.each(obj, function (index, item) {

// 객체를 전달받으면 index는 객체의 key(property)를 가리키고
// item은 키의 값을 가져옵니다. 

var result = ''; result += index + ' : ' + item; console.log(result);

// daum : http://daum.net 
// naver : http://naver.com 

})

또 다른예)

<ul class="list">
	<li>Lorem ipsum dolor sit amet.</li>
	<li>Lorem ior sit amet.</li>
	<li>Lorem ipsum </li>
</ul>

$('.list li').each(function (index, item) {
	// 인덱스는 말 그대로 인덱스
	// item 은 해당 선택자인 객체를 나타냅니다.
	$(item).addClass('li_0' + index);

	// item 과 this는 같아서 일반적으로 this를 많이 사용합니다.
	// $(this).addClass('li_0' + index); 
});

위 코드를 실행하면 li 의 클래스에 li_00, li_01, li_02 가 추가되어 있을 것입니다.

제이쿼리에 선택자를 넘기면 해당 선택자를 자바스크립트의 반복문과 같이 사용된다고 보면 됩니다.

* .is()

is() 메소드 특정요소가 선택요소와 관련값 또는 현재의 상태 등을 확인후 Boolean 값 true, false로 반환한다.
그래서 is()를 사용해 원하는 선택자 결과... 원하는 태그인지 확인할 때 유용하다.

아래는 is()를 사용하기 위한 간단한 사용방법이다.

예)

$("선택요소").is("비교할 요소 또는 표현식);

(1). 특정요소가 자식요소로 p 태그를 가지고 있는지 확인

아래는 is() 메소드가 사용된 간단한 예제로 p 태그를 가지는 경우 포함한다는 경고창을 보여주고 반대로 없는 경우라면 없다는 문구의 경고창을 출력해보겠다.

<div class="parentEle">
   <p>P tag here !!</p>
</div>

var isChild = $("div").children().is("p");
// isChild 변수에 자식요소인지 검수 후 결과를 저장

if (isChild) {
   alert('자식 요소가 맞습니다.');
}
else {
   alert('자식 요소가 아닙니다.');
}

p 태그가 맞으므로 '자식 요소가 맞습니다.'를 출력한다.

(2). is()를 사용해 클래스명이 맞는지 확인하는 예제보기

한가지 더 예를 들어보도록 하겠습니다. 만약 해당 클래스가 있는지 없는지 알아보려면? 아래와 같이 코드를 작성 가능하다.

<script>
var isChild = $("div").is(".test");
if (isChild) {
   alert("It has test classname !");
}
</script>

위 코드는 test 라는 클래스명을 가지고 있는지 판단하기 위해서 is() 내부에 .test를 추가했다.. 이처럼 선택자에 클래스를 사용하면 클래스 확인도 가능하다.

*타이머 함수 소개

1. 타이머 함수란?

타이머 함수는 일정한 시간마다 특정 구문을 실행하고자 할 때 사용하는 기능이다.
타이머 함수는 실무에서 다음과 같은 경우에 많이 사용한다.

# 이미지 슬라이더에서 일정한 시간마다 이미지가 자동으로 슬라이드되는 기능은 타이머 함수의 대표적인 기능이다.

# 롤링 배너에서 일정 시간마다 배너를 변경할 때에도 타이머 함수가 사용된다.

# 일정 시간마다 자동으로 변경되는 실시간 검색어 역시 타이머 함수가 사용된다.

# 게임에서 플레이 시간을 나타낼 때에도 함수를 사용한다.

2. 주요 기능

타이머 함수는 다음과 같이 3가지 주요 함수가 있다.

1) . setInterval()  = 일정 시간마다 주기적으로 특정 구문을 실행하는 기능

2) . setTimeout() = 일정 시간이 지난 후 특정 구문을 딱 한번 실행하는 구문

3) . clearInterval() = 실행 중인 타이머 함수를 멈추는 기능

타이머 함수는 모두 전역 객체인 window에 들어 있다.
즉 window.setInterval()과 setInterval()은 동일하다.

※ 핵심내용 ※

핵심 01 : 일정 시간마다 특정 구문을 실행하는 타이머 만들기

핵심 02 : 일정 시간이 지난 후 딱 한 번 실행되는 타이머 만들기

핵심 03 : 타이머 멈추기


핵심 01 : 일정 시간마다 특정 구문을 실행하는 타이머 만들기

일정 시간마다 특정 구문을 실행하기 위해서는 setInterval() 함수를 사용한다. 

사용 예) var timerID = setInterval(func, duration);

매개변수

func : 지연 시간마다 타이머 함수에 의해 호출되는 일종의 콜백 함수이다.

duration : 지연 시간, 단위는 밀리초이다.

리턴값

생성된 타이머 ID이다. 실행한 타이머 함수를 멈출 때 사용한다.

익명 함수를 넣어 만든 예)

$(document).ready(function(){
    var $output = $(".container");
    var  count = 0;
    
    setInterval(function(){
      //값 증가
      count++;
      //값을 출력
      $output.text(count);
    },1000);
  });

구현코드는 아주 간단하다.
먼저 setInterval() 함수 구문을 작성한 후 첫 번째 매개변수에는 익명함수를 넣어준다.
익명 함수 내부에는 count 값을 1 증가시킨 값을 #output에 출력하는 코드를 작성해준다.
두 번째 매개변수에는 1000(1초)를 넣어 준다.

일반 함수를 넣어 만든 예 )

 $(document).ready(function(){
    var $output = $(".container");
    var  count = 0;
    
    //함수 생성
    function addCount(){
      //값 증가
      count++;
      $output.text(count);
    }
    setInterval(addCount,1000);
  });

익명함수 부분을 addCount() 라는 일반 함수로 만든 후 setInterval() 함수에 연결해 사용한 구조이다.
익명함수와 거의 동일한 구조라고 볼 수 있다.

핵심 2 : 일정 시간 지난 후 딱 한 번 실행되는 타이머 만들기

일정 시간 지난 후 오직 한 번만 특정 구문을 실행하기 위해서는 setTimeout() 함수르르 사용한다.
setTimeout() 함수는 setInterval() 함수와 동일한 구조를 갖고 있다.
다른점이라면 setInterval()함수는 무한 호출이고 setTimeout() 함수는 오직 한 번만 호출한다.

사용 예)
var timeID = setTimeout(func,  duration);

매개변수

func : 지연 시간마다 타이머 함수에 의해 호출되는 일종의 콜백 함수이다.

duration : 지연 시간, 단위는 밀리초이다.

리턴값

생성된 타이머 ID이다. 이 값은 실행한 타이머 함수를 멈출 때 사용한다.

익명 함수를 넣어서 만든 예)

$(document).ready(function(){
    var $output = $(".container");
    
    setTimeout(function(){
      $output.append("<p>"+"안녕하세요. 환영합니다"+"</p>");
    },3000);
});

앞에서 배운 문법대로 setTimeout() 함수에 실행할 함수와 시간을 매개변수 값으로 넣어준다.

이처럼 타임아웃 함수는 이런 특징 때문에 처리를 지연시키고자 할 때 주로 사용한다.

핵심 3 : 타이머 멈추기

setInterval() 함수와 setTimeout() 함수를 이용해 생성한 타이머는 clearInterval() 함수를 이용해 멈출 수 있다.

사용 예)

clearInterval(timerID);

매개변수

timerID : 제거할 타이머 ID

리턴값

없음

예)

$(document).ready(function(){
    var $output = $(".container");
    var count = 0;
    
    timer = setInterval(function(){
      //값 증가
      count++;
      //값을 출력
      $output.text(count);
    },1000);
    
    });
    $(".btn").click(function(){
      clearInterval(timer);
  });

setInterval() 함수와 setTimeout() 함수로 생성된 타이머를 멈추기 위해서는 이들의 함수가 실행 시에 리턴해 주는 타이머 아이디만 있으면 된다.
이를 위해 타이머 아이디를 저장할 timer 라는 지역 변수를 만들어 준다.

setInterval() 함수에서 리턴해 주는 타이머 아이디 값을 timer에 넣어 준다.

버튼 클릭 시 실행되는 이벤트 리스터에 clearInterval() 함수를 이용해 타이머를 중지시킨다.

* Math 클래스 소개

1. Math 클래스란?

Math 클래스에는 술자를 랜덤하게 생성하는 기능부터 학창 시절에 배웠던 사인(sin) 및 코사인(cos) 과 같은 수학 관련 기능이 담겨 있다.

Math 클래스는 실무에서 다음과 같은 경우에 많이 사용한다.

※ 배너나 이미지 슬라이더의 콘텐츠를 랜덤하게 보여줄 때 Math.random() 메서드를 사용한다.

※콘텐츠의 위치를 무작위로 설정할 때도 Math.random()매서드를 사용한다.

※게시판의 페이지 수를 구할 때 Math.ceil() 메서드를 이용하면 쉽게 구할 수 있다.

※이미지 갤러리 제작시 이미지를 곡선을 따라 나열하고 싶을 때 Math.sin() 매서드를 사용한다.

2. 주요기능

Math 클래스의 대표적인 기능은 다음과 같다.

프로퍼티 목록

프로퍼티		설명

Pl		원주율 값

메서드 목록

abs() : 숫자의 절대값을 반환

acos() : 숫자의 아크코사인 값을 반환

asin() : 숫자의 아크사인 값을 반환

atan() : 숫자의 아크탄젠트 값을 반환

atan2() : x축과 주어진 점이 이루는 각도를 라디안 값으로 반환

cell() : 숫자의 올림값을 반환

cos() : 숫자의 코사인 값을 반환

floor() : 숫자의 내림값을 반환

log() : 숫자의 자연로그 값을 반환

max() : 주어진 두 수중 큰값을 반환

min() : 주어진 두 수 중 작은 값을 반환

random() : 0과 1사이의 난수 값을 반환

round() : 숫자와 가장 가까운 정수로 반올림하거나 반내림한 값을 반환

sin() : 숫자의 사인 값을 반환

sqrt() : 숫자의 제곱근을 반환

tan() : 숫자의 탄젠트 값을 반환

Math 클래스는 다른 자바스크립트 코어 클래스와 달리 대부분의 기능이 클래스 메서드로 구성되어 있어서 인스턴스 생성 없이 즉시 사용할 수 있다.
즉, 다음과 같이 기능을 바로 호출해서 사용한면 된다.

예)
Math.기능();

메서드는 인스턴스를  생성해야 사용할 수 잇는 인스턴스 메서드와 인스턴스 생성 없이 사용할 수 있는 클래스 매서드가 있다.

핵심 01. 랜덤 숫자 만들기

Math 에서 제공하는 random() 메서드를 이용하면 랜덤 숫자를 쉽게 만들 수 있다.

먼저 random()메서드 사용법이다.

예)

var value = Math.random()*원하는 수

매개변수 : 없음

리턴값 : 0에서 1사이의 소수값을 리턴해 준다.

Math.random() 메서드는 0에서 1사이의 소수값을 랜덤하게 리턴해 준다.
좀더 자세히 설명하면 0과 1을 포함하지 않는 0에서 0.999999999 사이의 숫자 값을 무작위로 만들어 낸다.
이에 따라 이 값에 특정 숫자를 곱하면 0에서 특정 숫자 사이의 랜덤값을 구할 수 있다.
예를 들어 random() 메서드가 0.5432 이라는 숫자를 리턴했다고 가정해보면, 여기에 10을 곱하면 5.432이 된다.
이와 같은 원리를 이용해 0에서 100사이의 정수값을 구하고 싶다면 다음과 같이 코드를 작성하면 된다.

사용 예)

var result = parseInt(Math.random()*100);
alert("값 = "+result);

핵심 02) . 작은 값, 큰 값 알아내기

Math.min(), Math.max()를 이용하면 특정 값보다 작거나 큰 값을 쉽게 구할 수 있다.

1) . Math.min()메서드

예)
var value = Math.min(minValue, userValue);

매개변수

minValue : 최솟값

userValue : 비교값

리턴값

userValue 값과 minValue 값을 비교해 작은 값을 리턴해 준다.

2) . Math.max()메서드

var value = Math.Max(maxValue, userValue);

매개변수

maxValue : 최댓값

userValue : 비교값

리턴값

userValue 값과 maxValue 값을 비교해 큰 값을 리턴해 준다.

*  .Math.floor()메서드

Math.floor() 메서드와 Math.ceil() 메서드를 이용하면 내림값과 올림값을 쉽게 구할 수 있다.

사용 예)

var result = Math.floor(num);

매개변수

	num : 실수 값

리턴 값

입력값이 실수인 경우 내림한 정수값

예)

var num = Math.floor(10.2);
alert(num)// 10출력

var num = Math.floor(10.9);
alert(num)//10출력

* .Math.ceil() 메서드

예)
var result = Math.ceil(num);

매개변수

num : 실수값

리턴값

입력값이 실수인 경우 올림한 정수값

예)

var num = Math.ceil(10.2);
alert(num);//11
var num = Math.ceil(10.9);
alert(num);//11

*inner,outer 메서드들

jQuery의 width, innerWidth, outerWidth로 특정 요소의 가로 크기를 가져올 수 있습니다.

width - padding 안쪽 크기
innerWidth - border 안쪽 크기
outerWidth - border 포함 크기

Height - padding 안쪽 크기
innerHeight - border 안쪽 크기
outerHeight - border 포함 크기

*String 클래스란?

String 클래스에는 문자열을 생성하는 기능을 시작으로 문자열과 관련된 유용한 기능이 담겨 있다.
String 클래스는 실무에서 다음과 같은 경우에 유용하게 사용된다.

1). 사이트 로그인 페이지 제작 시 입력받은 아이디와 패스워드 좌우 공백을 없애주는 기능을 만들 때 사용한다.

2). 게시판 제작 시 게시물의 특정 문자열을 다른 문자열로 치환하거나 삭제할 때도 사용한다.

*주요 기능

1. 프로퍼티 목록

length = 문자열 개수

2. 매서드 목록

charAt(n) = n번째 문자 구하기

charCode(n) = n 번째 문자의 코드 값 구하기

concat(str) = 문자열 뒤쪽에 str을 연결해 새로운 문자열 만들기

indexOf(substr) = substr 문자열이 위치한 위치값 구하기, 앞에서부터 검색 시작

lastIndex(substr) = substr 문자열이 위치한 위치값 구하기, 뒤에서부터 검색 시작

match(reg) 정규표현식(leg)을 활용한 문자열 검색

replace(reg,rep) 정규표현식을 활용한 문자열 교체

search(reg) = 정규표현식을 활용한 문자열 위치 검색

slice(start,end) = start번째부터 end번째 문자열 추출

split(str) = 문자열을 str로 분할해 배열로 생성해줌

substr(start[,count] = start번째부터 count개수만큼 문자열 추출

toLowerCase() = 모든 문자열을 소문자로 변환

toUpperCase() = 모든 문자열을 대문자로 변환

trim() = 좌우 공백 제거


핵심 1 : 문자열 만들기

문자열을 만드는 방법은 2가지가 있다.

방법 1. 리터럴 방식

var str = "hello";

방법 2. String 클래스의 객체를 생성해 이용하는 방식

var str = new String("hello");


여기서 주의깊게 살펴볼 부분이 있다.

alert("Hello".length); // 실행결과 5
alert("Hello".charAt(0)); // 실행결과 H

위의 내용을 실행하면 정상적으로 동작하는 것은 확인할 수가 있다.
그럼 실행될 수 있는 있는 이뉴는 뭘까
바로 문자열 리터럴 방식 구문은 자바스크립트에 의해 해석될 때 String 클래스의 객체를 생성해 이용하는 방식으로 변환돼 실행되기 때문이다.
즉 다음과 같이 변환된다.

"Hello".length; => new String("Hello").length;
"Hello".charAt(0); => new STring("Hello").CharAt(0);

핵심 2 : 문자열 길이 알아내기

문자열의 길이를 알아낼 때는 length 프로퍼티를 사용한다.

예)
입력받은 문자열의 길이를 출력하기

var str = window.prompt("문자를 입력해 주세요");
alert("문자열길이는 = "+str.length);

핵심 3 : 특정 위치의 문자 구하기

CharAt()을 이용하면 특정 위치의 문자를 구할 수 있다.

사용법 예)
var ch = 문자열.charAt(index);

매개변수

index : 문자열 위치 인덱스 값, 인덱스는 0부터 시작

리턴값

index 위치의 문자

문자열에서 문자 위치는 다음과 같다.
index 값이 0부터 시작한다는 점을 잊지 않아야한다.

예)

var str = "abcdef";

alert(str.CharAt(5));
또는
alert(str.CharAt(str.length-1));

둘다 결과 출력은 f

복잡한 예제)
$(document).ready(function(){
        var str = window.prompt("문자를 입력해주세요","");
        var $output = $("#output");
        var index = 0;

        var timerID = setInterval(function(){
            //index에 해당하는 문자 구하기
            var ch = str.charAt(index);

            //문자 출력
            $output.text(ch);

            //다음 문자 인덱스 구하기
            index++;
            //만약 모든 문자를 출력했ㄷ면 타이머 정지
            if(index>=str.length){
                clearInterval(timerID);
                alert("종료합니다.");
            }
        },1000);
    });

핵심 4 : 문자(열) 위치 찾기

indexOf() 메서드를 이용하면 특정 문자 또는 문자열이 위치하고 있는 위치 값을 쉽게 구할 수 있다.

예)

var ch = 문자열.indexOf(searchvalue,start);

매개변수

searchvalue : 찾는 문자열
start : 시작 위치, 기본값은 0

리턴값

찾는 문자열의 위치 값, 만약 찾지 못할 경우 -1


핵심 5 : 특정 위치에 문자 추가

특정 위치에 문자를 추가하는 기능은 존재하지 않는다.
그렇기 때문에 여러 문자열 메서드를 활용해 직접 만들어야 한다.
이때 slice() 메서드와 substr()메서드를 이용하면 문자열을 추가하는 기능을 만들 수 있다.

1. slice()메서드

예)
var 결과 = 문자열.slice(start,end);

매개변수

start : 문자열 시작 위치
end : 문자열 끝 위치

리턴값

지정한 문자열

slice()메서드는 매개변수 첫 번째 값인 시작 인덱스를 위치에서부터 두 번째 매개변수 값인 마지막 인덱스 전 단계까지의 문자열을 복사한다.
slice 단어 때문에 원본을 잘라내는 것처럼 보이지만 원본 문자열은 전혀 변경되지 않는다.
즉, 잘라낸다는 의미보다는 복사한다는 의미가 더 맞다.

2. substr() 메서드

예)
var 결과 = 문자열.substr(start,length);

매개변수

start : 문자열 시작 위치

length : 문자열 개수

리턴값

지정한 문자열

substr() 메서드 역시 특정 위치의 문자열을 복사할 때 사용하는 메서드이다.
slice() 메서드와 차이점은 두 번째 매개변수 값이 마지막 위치의 인덱스 값이 아니라 길이 값이라는 점만 다를 뿐 기능은 동일하다.

사용 예)
var str = "abcdef";
        var str2 = str.substr(2,2);
        console.log(str);//실행결과 abcdef
        console.log(str2);//실행결과 cd

slice와 substr의 차이점

/*var data = "닉네임딴동네";
        var result = data.slice(0,3)+"-"+data.slice(3,data.length);
        document.write(result);*/
        //slice(start,end)는 특정 부분 복사

        var data = "무슨무슨동네";
        var result = data.substr(0,3)+"-"+data.substr(3,data.length-3);
        document.write(result);
        //substr(start,length)는 특정 잘라내기
        //slice와 substr의 차이점은 매개변수가 start,end인지 start,length인지 차이다

핵심 6 : 특정 위치의 문자를 다른 문자로 변경하기

String 클래스 기능 중 replace()를 이용하면 특정 위치의 문자를 다른 문자로 쉽게 변경할 수 있다.

예)
var result = 문자열.replace(searchvalue, newvalue);

매개변수

searchvalue : 찾는 문자
newvalue : 교체 문자

리턴값

찾는 문자를 교체 문자로 변경한 문자열을 리턴해 준다.

사용 예)

 var data = "안녕하세요 우정호님 자바스크립트에 온 걸 환영합니다.";
       var result = data.replace("우정호","우정호2");
       alert(result);//결과 : 우정호에 있던 부분이 우정호2로 변한다.

이처럼 .replace() 메서드를 활용하면 특정 문자를 원하는 문자로 쉽게 변경할 수 있다.

핵심 7 : 특정 위치에 문자 제거

특정 위치에 문자를 제거하는 기능은 따로 없다.
여러 문자열 메서드를 이용해 만들어야 한다.
특정 위치의 문자 제거 역시 문자 추가와 동일한 방법으로 slice() 메서드와 substr() 메서드를 이용한다.

예시)

 var data="닉네임-딴동네";
       var result = data.slice(0,3)+data.slice(4,data.length);
       alert(result);

이렇게 되면 닉네임-딴동네중에 - 만 빼고 닉네임딴동네만 가져오게 된다.


문자열중 앞쪽 빈공간 빼고 나머지 표현하기 예)

<!DOCTYPE HTML>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title></title>

        <style>
            body {
                font-size: 11pt;
            }

            #input {
                width: 200px;
            }
            #output {
                width: 400px;
                height: 100px;
                line-height: 100px;
                border: 2px solid #eee;
                font-size: 15pt;
                text-align: center;
            }

        </style>

        <script src="http://code.jquery.com/jquery-latest.min.js"></script>

        <script>
            $(document).ready(function() {
                var $output = $("#output");
                var $input = $("#input");

                $("#confirm").click(function() {
                    // 입력 값 알아내기
                    var value = $input.val();

                    var result = ltrim(value);
                    $output.html(value + " ==> " + result);
                })
            });

            // 앞쪽 공백문자를 제거하는 함수
            function ltrim(str) {
                // 여기에 소스를 입력해주세요.
                
                //문자열 값이 없는 경우
                if(str.length<=0){
                    return "";
                }

                //첫 번째 문자가 공백이 아니라면 검사할 필요 없이 입력값을 그대로 리턴
                var first = str.charAt(0);
                if(first!="_"){
                    return str;
                }
                
                //공백이 끝나는 위치 찾기

                for(var index=1;index<str.length;index++){//index 값이 1부터 시작해서 문자열 길이 보다 작을경우 index 값을 하나씩 증가시킨다.
                    //공백 문자가 아닐때 까지 찾기
                    var ch = str.charAt(index); //str의 문자마다 index값을 넣어서 표현한다.
                    if(ch!="_"){//str문자마다 검사를 하다가 _가 아니라면 for문을 중지시킨다.
                        break;
                    }
                }
                    //index 위치에서 마지막 위치까지의 문자열 잘라내기
                    var result = str.slice(index,str.length);//증가시켜진 index값을 시작으로 str문자열의 길이까지를 나타낸다.
                    return result;//result값을 리턴시킨다.
            }

        </script>
    </head>

    <body>
        <div>
            <input type="text" id="input">
            <button id="confirm">
                확인
            </button>
        </div>

        <div id="output">
            여기에 실행 결과가 출력됩니다.
        </div>
    </body>

</html>

*Date 클래스

1. Date 클래스란?

Date 클래스에는 날짜 및 시간과 관련된 유용한 기능이 담겨 있다.
Date 클래스는 실무에서 다음과 같은 경우에 사용된다.

1). 다이어리 같은 프로젝트에서 달력을 만들 때 Date 클래스를 사용한다.
2). 현재 시간을 출력하는 시계를 만들 때에도 사용한다.
3). 슈팅 게임을 만드는 경우 플레이 경과 시간을 알아낼 때에도 사용한다.
4). D-Day를 출력할 때에도 사용한다.

2. 주요기능

Date 클래스에서 자주 사용하는 기능은 다음과 같다.

메서드 목록

getDate() : 로컬시간을 사용하여 일(월 기준)을 반환

getDay() : 로컬시간을 사용하여 일(주 기준, 즉 요일)을 반환

getFullYear() : 로컬시간을 사용하여 연도를 반환

getHours() : 로컬시간을 사용하여 시간을 반환

getMiliseconds() : 로컬시간을 사용하여 밀리초를 반환

getMinutes() : 로컬시간을 사용하여 분을 반환

getMonth() : 로컬시간을 사용하여 월을 반환

getSeconds() : 로컬시간을 사용하여 초를 반환

getTime() : 1970년 1월 1일 00:00:00부터 현재시간 까지 경과한 시간을 밀리초로 반환

getYear() : 로컬시간을 사용하여 연도 값을 반환. getFullYear() 사용을 권장

setDate() : 로컬시간을 사용하여 일(월 기준)을 설정

setFullYear() : 로컬시간을 사용하여 연도를 설정

setHours() : 로컬시간을 사용하여 시간을 설정

setMilliseconds() : 로컬시간을 사용하여 밀리초를 설정

setMinutes() : 로컬시간을 사용하여 분을 설정

setSeconds() : 로컬시간을 사용하여 초를 설정

setTime() : 날짜와 시간 값을 설정

setYear() : 로컬시간을 사용하여 연도 값을 설정. setFullYear() 사용을 권장


핵심 1. 시간, 분, 초, 밀리초 알아내기

Date의 getHours(), getMinutes(), getSeconds(), getMilliseconds()를 이용하면 시간, 분, 초, 밀리초를 알아낼 수 있다.

1). getHours()메서드

예)
var hours = Date인스턴스.getHours();

매개변수

없음

리턴값

0부터 23까지의 정수

2). getMinutes() 메서드

예)
var minutes = Date인스턴스.getMinutes();

매개변수

없음

리턴값

0부터 59까지의 정수

3). getSeconds() 메서드

예)
var seconds = Date인스턴스.getSeconds();

매개변수

없음

리턴값

0부터 59까지의 정수

4). getMilliseconds() 메서드

예)
var mSeconds = Date인스턴스.getMilliseconds();

매개변수

없음

리턴값

0부터 999까지의 정수값

사용 예)
var $output = $("#output");
    var object = new Date(); //Date라는 인스턴트 객체 생성
    var hours = object.getHours();//시간을 알아낼 수 있는 메서드 호출
    var minutes  = object.getMinutes();//분을 알아낼 수 있는 메서드 호출
    var seconds = object.getSeconds();//초를 알아낼 수 있는 메서드 호출
    var mSeconds = object.getMilliseconds();//밀리초를 알아낼 수 있는 메서드 호출
    $output.html(hours+":"+minutes+":"+seconds+":"+mSeconds); //$output에 시간,분,초,밀리초 텍스트표현

Date()객체 사용 시 주의해야 할 사항이 있는데, Date() 클래스의 인스턴스 생성 시 생성한 시점에 시간 정보와 날짜 정보가 담긴다는 것이다.
이때문에 만약 객체를 생성하고나서 5초 후에 getSeconds()와 같은 메서드를 활용해 초정보를 출력하는 겨우, getSeconds()를 호출할 때의 시간이 아니라 5초전의 시간 정보가 출력된다.
그러므로 현재 시간을 출력하려면 반드시 시간을 구할 때마다 Date 클래스의 인스턴스를 생성해서 사용해야 한다.

핵심 2. 년,월,일,요일 알아내기

Date의 getFullYaer(), getMonth(), getDate(), getDay()를 이용하면 년,월,일 요일을 알아낼 수 있다.

1). getFullYear() 메서드

예)
var year = Date인스턴스.getFullYear();

매개변수

없음

리턴값

네 자리 숫자로 된 연도 값

2). getMonth() 메서드

var month = Date인스턴스.getMonth();

매개변수

없음

리턴값

0(1월)부터 11(12월) 까지의 정수값

3). getDate() 메서드

var date = Date인스턴스.getDate();

매개변수

없음

리턴값

날짜(일)를 나타내는 1에서 31까지의 정수

4). getDate()메서드

예) var day = Date인스턴스.getDay();

매개변수

없음

리턴값

0(일)부터 6(토)까지의 정수값

※타이머 함수를 활용해 0.5초마다 익명함수를 호출해 주는데, 여기서 1초(1000밀리초)가 아닌 0.5초로 한 이유는 정확히 setInterval()함수는 약간의 오차를 발생하기 때문에 실행하다 보면 약간의 오차가 생겨 한 번에 2초씩 출력되는 경우가 발생하게 된다. 이를 처리하기 위해 0.5초에 한 번씩 익명함수를 호출해 준다.

*Array 클래스

배열 역시 배열 리터럴(["데이터1","데이터2",...])로 많이 사용했기 때문에 잘 모르겠지만 사실 배열 리터럴은  자동으로 배열(Array) 클래스로 변환돼 사용된다. 또, 배열(Array) 클래스는 자바스크립트 코어 라이브러리 중 사용 빈도가 가장 높은 클래스 중 하나이다.

1. Array 클래스란?

Array 클래스에는 배열을 만드는 기능부터, 추가, 삭제, 찾기, 등의 유용한 기능이 담겨 있습니다.
Array 클래스는 실무에서 다음과 같은 경우에 유용하게 사용된다.

1). 게시판에서 게시물 리스트를 출력할 떄 배열이 사용된다.

2). 갤러리에서 이미지 리스트를 출력할 때 배열이 사용된다.

3). 웹 사이트의 메뉴를 만들 때 메뉴 항목을 출력할 때에도 배열을 사용한다.

2. 주요 기능

Array 클래스에서 자주 사용하는 프로퍼티와 메서드는 다음과 같다.

프로퍼티 목록

length : 배열의 크기(개수)를 알 수 있다.

메서드 목록

concat() : 배열에 다른 배열이나 값을 연결해 새 배열을 만들어 반환

indexOf() : 배열 요소의 인덱스 값을 반환, 배열 요소가 없는 경우 -1을 반환

join() : 지정된 구분 문자열로 배열 요소들을 이어 붙여서 문자열을 만듬

pop() : 마지막 배열 요소를 반환

push() : 새로운 배열 요소를 마지막 배열 위치에 추가

reverse() : 배열 요소의 순서를 반대로 바꿈

shift() : 배열에서 첫 번째 요소를 제거한 후 배열을 반환

slice() : 배열의 일부분을 반환

sort() : 배열 요소를 내림차순 또는 오름차순으로 변경

splice() : 배열 요소를 추가, 삭제, 교체

unshift() : 배열 맨 앞에 배열 요소를 삽입

핵심 1. 배열 만들기

배열을 만드는 방법은 2가지가 있다.

1). 배열 리터럴 방식

var menus = ["menu1", "menu2", "menu3", "menu4"];

2). 배열 클래스 방식

var users = new Array("menu1", "menu2", "menu3", "menu4");

두 방법이 다른 것처럼 보이지만 '방법 1. 배열리터럴 방식'이 자바스크립트에 의해 실행되면 ' 방법 2- 배열 클래스 방식' 으로 변환돼 실행된다.
그렇기 때문에 실무에서는 좀더 간결한 배열 리터럴 방식을 이용해 배열을 생성한다.

핵심2. 배열 요소 개수 알아내기

length 프로퍼티를 이용하면 배열 요소 개수를 쉽게 알아낼 수 있다.

users 배열 요소 개수 알아내기 예)

var users = ["user1", "user2", "user3", "user4"];
alert(users.length); // 실행결과 : 4

핵심3. 특정 위치의 배영ㄹ 요소 접근하기

배열의 N번째 배열 요소에 접근하는 기능은 다음과 같이 [ ] 내부에 접근하고자 하는 인덱스 값을 넣으면 된다.

예)

var 변수 = 배열변수[인덱스]

사용 예)

 var menuItems = ["menu1", "menu2", "menu3", "menu4"];
        // 여기에 풀이를 입력해주세요.
        for (var i = 0; i < menuItems.length; i++) {
            // 벼열 요소 접근
            var menuItem = menuItems[i];
            // 배열 요소 출력
            document.write(i + " = " + menuItem, "<br>");
            console.log(i+" = "+ menuItems[i]);
        }

핵심4. 배열을 문자열로 만들기

종종 배열을 문자열로 만들어야 하는 경우가 있다.
이때 join() 메서드를 이용하면 된다.

var menus = 배열.join([separator]);

매개변수

separator : 선택 사항이며, 배열 요소를 구분하기 위해 사용하는 문자열이다.
생략하면 쉼표(,)가 구분자로 사용된다.

	var menuItems = ["menu1", "menu2", "menu3", "menu4"];
	var result = menuItems.join("-");
	console.log(result);//결과 : " menu1-menu2-menu3-menu4"

핵심5. 문자열을 배열로 만들기

문자열을 배열로 만들 때는 Array 클래스에서 제공하는 split() 메서드를 이용하면 된다.
이 기능은 실무에서 많이 사용하는 기능 중 하나이다.

var aryData = 문자열.split(separator);

매개변수

separator : 구분자로 사용할 문자열이다.

리턴값

구분자로 나눠 만들어진 배열

사용 예)

	var $menu = $(".menu");
             var menuData = "menu1,menu2,menu3,menu4";
             // 여기에 풀이를 입력해주세요.

             //문자열 메뉴 아이템 정보를 배열 메뉴 아이템 정보로 변경
             var menuItems = menuData.split(",");

             //메뉴 개수만큼 루프 돌기 =
             for(var i=0;i<menuItems.length;i++){
                //i번째 배열 요소를 메뉴 아이템으로  만들기
                var newMenuItem ="<li>"+menuItems[i]+"</li>";
                //동적으로 메뉴  아이템 추가
                $menu.append(newMenuItem);
            }
        })

핵심 6. 특정 위치에 배열 요소 추가

실무 작업을 진행하기 위해서는 원하는 요소에 배열 요소를 추가할 수 있어야 한다.
마지막, 첫 번째  n번째 위치로 나눠 배열 요소를 추가하는 방법에 대해 알아보겠다

1). 배열 마지막 위치에 배열 요소 추가하기

push() 메서드를 이용하면 마지막 위치에 배열 요소를 쉽게 추가할 수 있다.

예)

var result = 배열.push(element[,element]);

매개변수

element : 배열 마지막 위치에 추가할 배열 요소이다.

리턴값

신규 배열 요소를 추가한 배열의 리턴

사용 예)

            var menuItems = ["menu1", "menu2", "menu3", "menu4"];
            console.log("실행 전 : " + menuItems.join(","));

            menuItems.push("new");
            console.log("실행 후 : " + menuItems.join(","));

//실행전 : menu1,menu2,menu3,menu4
  실행후 : menu1,menu2,menu3,menu4,new

2). 배열 첫 번째 위치에 배열 요소 추가하기

unshift() 메서드를 이용하면 첫 번째 위치에 배열 요소를 쉽게 추가할 수 있다.

예)

var result = 배열.unshift(element[,element]);

매개변수

element : 추가 요소

리턴값

추가 후 배열의 크기

사용 예)

	var menuItems = ["menu1", "menu2", "menu3", "menu4"];
            console.log("실행 전 : " + menuItems.join(","));

            menuItems.unshift("new");
            console.log("실행 후 : " + menuItems.join(","));

//실행전 : menu1,menu2,menu3,menu4
  실행후 : new,menu1,menu2,menu3,menu4

3). 배열 N번째 위치에 배열 요소 추가하기

splice()를 이용하면 배열 특정 위치의 배열 요소를 추가하거나 삭제할 수 있다.
먼저 splice()를 활용한 배열 요소 추가 방법을 배운 후 이어서 배열 요소 삭제 방법을 배워 보겠다

예)

var result = 배열.splice(start, deleteCount [,element]);

매개변수

start : 추가 또는 삭제할 배열 요소의 시작 위치

deleteCount : start부터시작하여 삭제할 배열 요소의 개수, 요소를 추가할 때는 0을 적용

element : 추가 요소

리턴값

삭제한 배열 요소들의 배열, 배열 요소를 추가할 경우는 리턴값이 없음.

사용 예)
 var menuItems = ["menu1", "menu2", "menu3", "menu4"];
            console.log("실행 전 : " + menuItems.join(","));

            menuItems.splice(2,0,"new");//앞자리는 어디서 부터 시작할건지 두번째는 0이면 추가 1~부터는 들어갈 자리부터 삭제 세번째는 어떠한걸 넣을건지
            console.log("실행 후 : " + menuItems.join(","));

//실행전 : menu1,menu2,menu3,menu4
  실행후 : menu1,menu2,new,menu3,menu4

핵심 7. 특정 위치의 배열 요소 삭제

1). 첫 번째 요소 삭제하기

shift()를 이용하면 첫 번째 요소를 쉽게 삭제할 수 있다.

예)
var result = 배열.shift();

원본 배열에서 첫 번째 배열 요소가 삭제되며 삭제된 요소가 리턴된다.

매개변수

없음

리턴값

삭제된 배열 요소

사용 예)

	var menuItems = ["menu1", "menu2", "menu3", "menu4"];
            console.log("실행 전 : " + menuItems.join(","));

            menuItems.shift();
            console.log("실행 후 : " + menuItems.join(","));

//실행전 : menu1,menu2,menu3,menu4
  실행후 : menu2,menu3,menu4

2). 마지막 번째 요소 삭제하기

pop()을 이용하면 배열의 마지막 번째 요소를 쉽게 삭제할 수 있다.
pop()은 push()와 반대되는 개념으로 push()가 배열 요소를 마지막에 추가하는 기능이라면 pop()은 마지막 요소를 빼내느느 기능이다.

예)
var result = 배열.pop();

배열의 마지막 번째 배열 요소를 뺀다.

매개변수

없음

리턴값

빼낸 마지막 번째 배열 요소

사용 예)

	var menuItems = ["menu1", "menu2", "menu3", "menu4"];
            console.log("실행 전 : " + menuItems.join(","));

            menuItems.pop();
            console.log("실행 후 : " + menuItems.join(","));

//실행전 : menu1,menu2,menu3,menu4
  실행후 : menu1,menu2,menu3

3). N번째 배열 요소 삭제하기

splice() 메서드를 활용하면 N번째 배열 요소를 쉽게 삭제할 수 있다.

var menuItems = ["menu1", "menu2", "menu3", "menu4"];
            console.log("실행 전 : " + menuItems.join(","));

            menuItems.splice(2,1);
            console.log("실행 후 : " + menuItems.join(","));

//실행전 : menu1,menu2,menu3,menu4
  실행후 : menu1,menu2,menu4

핵심 8. 정렬하기

배열 클래스에는 정렬 기능을 하는 sort() 메서드를 제공한다.

1). sort() 메서드

예)
var result = 배열.sort([compareFunction]);

배열 요소를 오름차순 또는 내림차순으로 정렬해 준다.

매개변수

compareFunction : 정렬 순서를 정의하는 함수이다.
		생략 시 문자를 오름 차순으로 처리한다.
		매개변수 사용법은 바로 이어서 예제와 함께 설명하겠다.

리턴값

정렬이 완료된 결과값, 정렬에 사용한 원본도 변경된다.

2). 문자 오름차순 정렬

오름차순은 작은 것부터 큰 순서대로의 정렬을 의미한다.
sort()를 이용해 오름차순으로 문자를 정렬하고 싶으면 compareFunction을 다음과 같이 만들어 주면 된다.

예)

배열.sort(function(a,b){
	return a-b;
})

사용 예)
	var menuItems = ["영희", "철수", "미자", "진수","딴동네"];
            document.write("실행 전 : " + menuItems.join(",")+"<br>");

            menuItems.sort();
            document.write("실행 후 : " + menuItems.join(","));

//실행 전 : 영희,철수,미자,진수,딴동네
실행 후 : 딴동네,미자,영희,진수,철수

2). 문자를 내림차순 정렬

내림차순은 큰 것부터 작은 순서대로의 정렬을 의미한다.
sort()를 이용해 내림차순으로 처리하려면 compareFuntion을 다음과 같이 만들어 주면 된다.

var result = 배열.sort(function(a,b){
	return b>a;
});

var userNames = ["영희", "철수", "미자", "진수", "딴동네"];
            console.log("실행 전 : " + userNames.join(","));
            userNames.sort(function(a, b) {
                return b > a;
            });
            console.log("실행 후 : " + userNames.join(","));

//실행 전 : 영희, 철수, 미자, 진수, 딴동네
  실행 후 : 철수, 영희, 미자, 딴동네, 진수

3). 숫자 정렬하기

sort() 메서드 사용 시 주의해야 할 사항이있다.
sort()는 기본적으로 문자열 정렬 기능이기 때문에 숫자도 문자열로 처리해 버린다.
이 때문에 sort()를 이용해서 숫자 값이 담긴 배열을 정렬하면 정상적으로 처리되지 않게 된다.

사용 예)

var aryData = [5, 2, 8, 9, 3, 6, 4, 1, 77];
            console.log("실행 전 : " + aryData.join(","));
            aryData.sort();
            console.log("실행 후 : " + aryData.join(","));

여기서 실행을 시키게 되면
순서대로 나와야 할 값이 1,2,4,5,6,77,8,9로 나와버린다 이를 해결하기 위해서는 compareFuntion을 활용해야 한다.

변경 후)

var aryData = [5, 2, 8, 9, 3, 6, 4, 1, 77];
            console.log("실행 전 : " + aryData.join(","));
            aryData.sort(function(a, b) {
                return a-b;
            });
            console.log("실행 후 : " + aryData.join(","));

결과 : 1,2,4,5,6,8,9,77

* .offset

.offset()은 선택한 요소의 좌표를 가져오거나 특정 좌표로 이동시킨다.

문법1)
.offset()

선택한 요소의 좌표를 가져온다.
예)
var jb = $('h1').offset();
는 h1요소의 좌표를 변수 jb에 저장한다.

문법2)
.offset( coordinates )

선택한 요소를 특정 위치로 이동시킨다.
예)
$('h1').offset({left:100, top:50});
은 h1요소를 왼쪽에서  100px, 위에서 50px위치로 이동시킨다.

